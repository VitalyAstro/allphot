# -*-bash-*-

inherit process

ALLPHOT_NAME="image"

# daophot_opt <input option file> or
# daophot_opt <OP1>=<value1>...<OPn>=<valuen>
daophot_opt() {
    # no arguments: don't change anything
    [[ -z ${1} ]] && return 0
    echo >> ${ALLPHOT_CMDFILE} "OPTION"
    # option file
    if  [[ -e ${1} ]]; then
	echo >> ${ALLPHOT_CMDFILE} "$(allphot_input ${1})"
	return 0
    fi
    # option command
    echo >> ${ALLPHOT_CMDFILE}
    local opt
    for opt in $@; do
	if [[ ${opt} =~ = ]]; then
	    echo >> ${ALLPHOT_CMDFILE} "${opt}"
	fi
    done
    echo >> ${ALLPHOT_CMDFILE}
    echo " >>> Will run DAOPHOT OPT"
}

# daophot_exit
daophot_exit() {
    echo >> ${ALLPHOT_CMDFILE} "EXIT"
}

# daophot_attach <FITS file>
daophot_attach() {    
    local fitsname="$(allphot_input ${1})"
    ALLPHOT_NAME="${fitsname%.*}"    
    echo >> ${ALLPHOT_CMDFILE} "ATTACH ${fitsname}"
}

# daophot_sky
daophot_sky() {
    echo >> ${ALLPHOT_CMDFILE} "SKY"
    echo " >>> Will run DAOPHOT SKY"
}

# daophot_find  <nframes average,summed> <output coordinate file>
daophot_find() {
    rm -f ${ALLPHOT_PROCDIR}/*jnk.*
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	FIND
	${1}
	$(allphot_output ${2})
	y
EOF
    echo " >>> Will run DAOPHOT FIND"
}

# daophot_phot <input phot options file> <input coordinate file> <output file>
#   or
# daophot_phot <input phot options file> <psf phot file> <input id file> <output file>
daophot_phot() {
    echo >> ${ALLPHOT_CMDFILE}	"PHOT"
    # might have to do the option stuff 
    echo >> ${ALLPHOT_CMDFILE} $(allphot_input ${1})
    echo >> ${ALLPHOT_CMDFILE}
    echo >> ${ALLPHOT_CMDFILE} $(allphot_input ${2})
    if [[ $# -eq 4 ]]; then
	echo >> ${ALLPHOT_CMDFILE} "$(allphot_input ${3})"
	echo >> ${ALLPHOT_CMDFILE} "$(allphot_output ${4})"
    else
	# hack to avoid doing the psf subtracted photometry
	if [[ -e ${ALLPHOT_PROCDIR}/${ALLPHOT_NAME}.psf ]]; then
	    mv -f ${ALLPHOT_PROCDIR}/${ALLPHOT_NAME}.psf{,.bck}
	    echo >> ${ALLPHOT_POSTPROC} \
		"mv -f ${ALLPHOT_PROCDIR}/${ALLPHOT_NAME}.psf{.bck,}"
	fi
	echo >> ${ALLPHOT_CMDFILE} "$(allphot_output ${3})"
    fi
    echo " >>> Will run DAOPHOT PHOT"
}

# daophot_pick <input file> <nstars> <mag faint> <output psf stars file>
daophot_pick() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	PICK
	$(allphot_input ${1})
	${2} ${3}
	$(allphot_output ${4})
EOF
    echo " >>> Will run DAOPHOT PICK"
}

# daophot_psf <input mag file> <input psf stars file> <output psf file>
daophot_psf() {
    local phofile=${1} neifile=${2%.*}.nei
    if [[ ${phofile} == ${neifile} ]]; then
	mv -f ${phofile}{,.2}
	phofile=$(allphot_input ${phofile}.2)
	echo >> ${ALLPHOT_POSTPROC} \
	    "[[ -e ${neifile} ]] && rm -f ${phofile}.2 || mv ${phofile}{.2,}"
    else
	phofile=$(allphot_input ${1})
	$(allphot_output ${neifile}) &> /dev/null
    fi
    
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	PSF
	${phofile}
	$(allphot_input ${2})
	$(allphot_output ${3})
EOF
    echo " >>> Will run DAOPHOT PSF"
}

# daophot_append <input file 1>  <input file 2> <output merged file>
daophot_append() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	APPEND
	$(allphot_input ${1})
	$(allphot_input ${2})
	$(allphot_output ${3})
EOF
    echo " >>> Will run DAOPHOT APPEND"
}

# daophot_offset <input file> <ID> <DX> <DY> <DMAG> <output file>
daophot_offset() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	OFFSET
	$(allphot_input ${1})
	${2} ${3} ${4} ${5}
	$(allphot_output ${6})
EOF
    echo " >>> Will run DAOPHOT OFFSET"
}

# daophot_sort <column index> <input file> <output file> <renumber stars?>
daophot_sort() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	SORT
	${1}
	$(allphot_input ${2})
	$(allphot_output ${3})
	${4}
EOF
    echo " >>> Will run DAOPHOT SORT"
}

# daophot_substar <input psf file> <input phot file>  [<stars to keep file>] <output FITS file>
daophot_substar() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	SUBSTAR
	$(allphot_input ${1})
	$(allphot_input ${2})
EOF
    if [[ $# -eq 4 ]] && [[ -n ${3} ]]; then
	echo >> ${ALLPHOT_CMDFILE} "Y"
	echo >> ${ALLPHOT_CMDFILE} "$(allphot_input ${3})"
	echo >> ${ALLPHOT_CMDFILE} "$(allphot_output ${4})"
    elif [[ $# -eq 4 ]] && [[ -z ${3} ]]; then
	echo >> ${ALLPHOT_CMDFILE} "N"
	echo >> ${ALLPHOT_CMDFILE} "$(allphot_output ${4})"
    else
	echo >> ${ALLPHOT_CMDFILE} "N"
	echo >> ${ALLPHOT_CMDFILE} "$(allphot_output ${4})"
    fi
    echo " >>> Will run DAOPHOT SUBSTAR"
}

# daophot_peak <input phot file> <input psf file> <output file>
daophot_peak() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	PEAK
	$(allphot_input ${1})
	$(allphot_input ${2})
	$(allphot_output ${3})
EOF
    echo " >>> Will run DAOPHOT PEAK"
}

# daophot_group <input photometry file> <input psf file> <critical overlay> <output group file>
daophot_group() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	GROUP
	$(allphot_input ${1})
	$(allphot_input ${2})
	${3}
	$(allphot_output ${4})
EOF
    echo " >>> Will run DAOPHOT GROUP"
}

# daophot_nstar <input psf file> <input group file> <output file>
daophot_nstar() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	NSTAR
	$(allphot_input ${1})
	$(allphot_input ${2})
	$(allphot_output ${3})
EOF
    echo " >>> Will run DAOPHOT NSTAR"
}

# daophot_select <input group file> <min group file> <max group> <output group file>
daophot_select() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	SELECT
	$(allphot_input ${1})
	${2},${3}
	$(allphot_output ${4})
EOF
    echo " >>> Will run DAOPHOT SELECT"
}

# daophot_dump <box size> <x center> <y center>
daophot_dump() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	DUMP
	${1}
	${2},${3}
EOF
    echo " >>> Will run DAOPHOT DUMP"
}

# daophot_addstar <input psf file> <seed> <gain> <minmag> <maxmag> <nstars> <nframes> <prefix>
#   or
# daophot_addstar <input psf file> <seed> <gain> <input> <output>
daophot_addstar() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	ADDSTAR
	$(allphot_input ${1})
	${2}
	${3}
EOF
    if [[ $# -eq 8 ]]; then
	cat >> ${ALLPHOT_CMDFILE} <<-EOF
	    
	    ${4},${5}
	    ${6}
	    ${7}
	    ${8}
EOF
	local i
	for i in $(seq -w 1 ${7}); do
	    allphot_output "${8}${i}.fits" > /dev/null
	    allphot_output "${8}${i}.add"  > /dev/null
	done
    elif [[ $# -eq 5 ]]; then
	cat >> ${ALLPHOT_CMDFILE} <<-EOF
	    $(allphot_input ${4})
	    $(allphot_output ${5})

EOF
    else
	die -q "Incorrect number of parameters in addstar"
    fi
    echo " >>> Will run DAOPHOT ADDSTAR"
}

# daophot_fudge <output> <first col> <last col> <first row> <last row> <brightness>
#   or 
# daophot_fudge <output> <border> <order> <first col> <last col> <first row> <last row>
daophot_fudge() {
    echo >> ${ALLPHOT_CMDFILE} FUDGE
    echo >> ${ALLPHOT_CMDFILE} $(allphot_output ${1})
    if [[ $# -eq 6 ]]; then
	cat >> ${ALLPHOT_CMDFILE} <<-EOF
	    0
	    ${2},${3}
	    ${4},${5}
	    ${6}
	    e
EOF
    elif [[ $# -eq 7 ]]; then
	cat >> ${ALLPHOT_CMDFILE} <<-EOF
	    ${2}
	    ${3}
	    ${4},${5}
	    ${6},${7}
	    e
EOF
    else
	die -q "Incorrect number of parameters in fudge"
    fi
    echo " >>> Will run DAOPHOT FUDGE"
}

# daophot_allstar <fits file> <input psf file> <input mag file> <output allstar file> <output fits sub>
daophot_allstar() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF

	$(allphot_input ${1})
	$(allphot_input ${2})
	$(allphot_input ${3})
	$(allphot_output ${4})
	$(allphot_output ${5})
EOF
    echo " >>> Will run ALLSTAR"
}
