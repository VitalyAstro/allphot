# -*-*-shell-script-*-*-

inherit process

# mch_getframes <match file> INTERNAL
# return the frame names within a match file
mch_getframes() {
    awk '{print substr($1,2,match($1,/\./)-2)}' ${1}
}

# mch_getmaster <match file> INTERNAL
# return the master frame name within a match file
mch_getmaster() {
    awk 'NR==1{print substr($1,2,match($1,/\./)-2);exit}' ${1}
}

# mch_output <match file> <suf>...<suf> INTERNAL
# prepare frames from a match file with suffixes 
mch_output() {    
    local i f mchfile=${1}
    shift
    for i in $*; do
	for f in $(mch_getframes ${mchfile}); do
	    echo $(allphot_output ${f}.${i})# > /dev/null
	done
    done
}

get_cutout_limits() {
    echo ${1} | sed \
	-e 's/\[\([[:digit:]]*\):\([[:digit:]]*\),\([[:digit:]]*\):\([[:digit:]]*\)\]/\1 \2 \3 \4/'
}

# dao_match [options] <input reference star file> <output mch file> <star file 1>...<star file n> PUBLIC
# create a file of answers to be run by daomatch
# --chimax=<val>    : Skip stars with chi > <val>
# --sharpmax=<val>  : Skip stars with |sharp| > <val>
# --magmax=<val>    : Skip stars with mag > <val>
# --sigmax=<val>    : Skip stars with dmag > <val>
# --scale=<val>     : Force the scale value relative to the reference (1: no scaling)
# --onlyshift       : Search only for shifts (no rotations, no scaling)

dao_match() {
    # options
    local refcuts="" trns=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
    	    --chimax=*) refcuts="${refcuts}%${1##*=}" ;;
    	    --sharpmax=*) refcuts="${refcuts}[${1##*=}" ;;
	    --magmax=*) refcuts="${refcuts}<${1##*=}" ;;
	    --sigmax=*) refcuts="${refcuts}|${1##*=}" ;;
	    --ref=*) master="${1##*=}" ;;
            --onlyshift) trns=";" ;;
	    --scale=*) trns="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    declare -a cutout
    # master input file
    if [[ ${1} =~ "\[" ]]; then
	    echo >> ${ALLPHOT_CMDFILE} "$(allphot_input ${1%%\[*})${refcuts}*"
	    cutout=( $(get_cutout_limits "${1}") )
	    echo >> ${ALLPHOT_CMDFILE} ${cutout[0]},${cutout[1]}
	    echo >> ${ALLPHOT_CMDFILE} ${cutout[2]},${cutout[3]}
    else
	echo >> ${ALLPHOT_CMDFILE} "$(allphot_input ${1%%\[*})${refcuts}"
    fi
    shift

    # output file name
    echo >> ${ALLPHOT_CMDFILE} $(allphot_output ${1})
    shift

    # all other input files
    local scat
    for scat in $*; do
	if [[ ${scat} =~ "\[" ]]; then
	    echo >> ${ALLPHOT_CMDFILE} "$(allphot_input ${scat%%\[*})${trns}*"
	    cutout=( $(get_cutout_limits "${scat}") )
	    echo >> ${ALLPHOT_CMDFILE} ${cutout[0]},${cutout[1]}
	    echo >> ${ALLPHOT_CMDFILE} ${cutout[2]},${cutout[3]}
	else
	    echo >> ${ALLPHOT_CMDFILE} "$(allphot_input ${scat%%\[*})${trns}!"
	fi
    done
    echo >> ${ALLPHOT_CMDFILE}
    write_process_msg "Will run DAOMATCH with master reference ${ref}"
}

# dao_master 1:<input mch file> 2:<min frames>,<min frac frames>,<enough frames>
#            3:<max sigma> 4:<d.o.f.> 5:<critical rad> 6:<assign stars new IDs?>
#            7:<output mean mag file> 8:<output cor mag file> 9:<output raw mag file> 10:<output mch file>
#            11:<output transfer table file> 12:<output coo files?> 13:<output mtr files?>  PUBLIC
# create a file of answers to be run by daomaster
dao_master() {
    # options
    local refcuts="" trns=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
    	    --chimax=*) refcuts="${refcuts}%${1##*=}" ;;
    	    --sharpmax=*) refcuts="${refcuts}[${1##*=}" ;;
	    --magmax=*) refcuts="${refcuts}<${1##*=}" ;;
	    --sigmax=*) refcuts="${refcuts}|${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ ${12} == y ]] && mch_output ${1} coo
    [[ ${13} == y ]] && mch_output ${1} mtr
    local mchfilein=$(allphot_input ${1})
    local mchfileout=${10}
    if [[ ${1} == ${10} ]]; then
	mchfileout=$(allphot_output ${10}.out)
	echo >> ${ALLPHOT_POSTPROC} "mv -f $(canonicalise ${10}.out) $(canonicalise ${10})"
    else
	mchfileout=$(allphot_output ${10})
    fi

    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	${mchfilein}${refcuts}
	${2}
	${3}
	${4}
	${5}
EOF
    awk '{printf "\n"}' ${1} >> ${ALLPHOT_CMDFILE}
    # loop from initial radius down to 1 pixel radius, do it twice each time
    local -i irad=${5%.*}
    while (( irad > 0 )); do 
	echo >> ${ALLPHOT_CMDFILE} ${irad}
	echo >> ${ALLPHOT_CMDFILE} ${irad}
	irad=$(( ${irad} - 1 ))
    done
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	0
	${6}
	y
	$(allphot_output ${7})
	y
	$(allphot_output ${8})
	y
	$(allphot_output ${9})
	y
	${mchfileout}
	y
EOF
	if [[ -n ${refcuts} ]]; then
	    echo >> ${ALLPHOT_CMDFILE} ${12}
	else
	    echo >> ${ALLPHOT_CMDFILE} $(allphot_output ${11})
	    echo >> ${ALLPHOT_CMDFILE} ${12}
	    echo >> ${ALLPHOT_CMDFILE} ${13}
	fi
    write_process_msg "Will run DAOMASTER on ${mchfilein}"
}

# dao_allframe <mch file> <mag file>
# create a file of answers to be run by allframe
dao_allframe() {
    mch_output ${1} alf
    local mchfile=$(allphot_input ${1})
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	
	${mchfile}
	$(allphot_input ${2})
EOF
    write_process_msg "Will run ALLFRAME on ${mchfile}"
}

# dao_montage2 <mch file> <suffix> <num frames, perc> <xmin:xmax,ymin:ymax> <expansion factor> <sky?> <output>
# create a file of answers to be run by montage2
dao_montage2() {
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	$(allphot_input ${1})
	${2}
	${3}
EOF
    declare -a cutout
    cutout=( $(get_cutout_limits "${4}") )
    cat >> ${ALLPHOT_CMDFILE} <<-EOF
	${cutout[0]},${cutout[1]}
	${cutout[2]},${cutout[3]}
	${5}
	${6}
EOF
    [[ ${6} != "e" ]] && echo >> ${ALLPHOT_CMDFILE} $(allphot_output ${7})

    # now montage2 needs silently the psf and fits files
    # make sure we have them locally to the processing directory
    local f
    for f in $(mch_getframes ${1}); do
	allphot_input ${f}.psf > /dev/null
	allphot_input ${f}${2} > /dev/null
    done

    write_process_msg "Will run MONTAGE2 on ${mchfile}"
}
