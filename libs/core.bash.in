# -*-bash-*-

# check_do function args
# Check that function exists, and call it with args.
check_do() {
	local function="${1}"
	shift
	if is_function "${function}" ; then
		${function} "$@"
	else
		die "No function ${function}"
	fi
}

# die [-q] "Message" PUBLIC
# Display "Message" as an error. If -q is not provided, gives a stacktrace.
die() {
	local item funcname="" sourcefile="" lineno="" n e s="yes"

	# do we have a working write_error_msg?
	if is_function "write_error_msg" ; then
		e="write_error_msg"
	else
		e="echo"
	fi

	# quiet?
	if [[ ${1} == "-q" ]] ; then
		s=""
		shift
	fi

	$e "${@:-(no message)}"

	if [[ -n "${s}" ]] ; then
		echo "Call stack:" 1>&2
		for (( n = 1 ; n < ${#FUNCNAME[@]} ; ++n )) ; do
			funcname=${FUNCNAME[${n}]}
			sourcefile=$(basename ${BASH_SOURCE[${n}]})
			lineno=${BASH_LINENO[$(( n - 1 ))]}
			echo "    * ${funcname} (${sourcefile}:${lineno})" 1>&2
		done
	fi

	# Evil, but effective.
	kill ${ESELECT_KILL_TARGET}
	exit 249
}

# do_action action args...
# Load and do 'action' with the specified args
do_action() {
    local action="${1##--}" modfile="" subaction="${2##--}"
    [[ -z ${action} ]] && die "Usage: do_action <action> <args>"
    shift; shift
    
    ALLPHOT_MODULE_NAME="${action}"
    ALLPHOT_COMMAND="${ALLPHOT_PROGRAM_NAME} ${ALLPHOT_MODULE_NAME}"
    
    [[ ${ALLPHOT_BINARY_NAME##*/} != ${ALLPHOT_PROGRAM_NAME} ]] && \
	ALLPHOT_COMMAND="${ALLPHOT_BINARY_NAME##*/}"
    
    modfile=$( ap_find_module "${action}" )
    (
	source "${ALLPHOT_DEFAULT_ACTIONS}" 2>/dev/null \
	    || die "Couldn't source ${ALLPHOT_DEFAULT_ACTIONS}"
	source "${modfile}" 2>/dev/null \
	    || die "Couldn't source ${modfile}"
	if [[ -z ${subaction} ]] ; then
	    check_do "do_${DEFAULT_ACTION:-usage}" "$@"
	else
	    is_function "do_${subaction}" \
		|| die -q "Action ${subaction} unknown"
	    check_do "do_${subaction}" "$@"
	fi
   )
}

# inherit module PUBLIC
# Sources a given eselect library file
inherit() {
    local x
    for x in "$@"; do
	[[ -e "${ALLPHOT_CORE_PATH}/${x}.bash" ]] \
	    || die "Couldn't find ${x}.bash"
	source "${ALLPHOT_CORE_PATH}/${x}.bash" \
	    || die "Couldn't source ${x}.bash"
    done
}

# GNU sed wrapper (real path to GNU sed determined by configure)
sed() {
    %SED% "$@"
}

# do_smp action args...
# Load and do 'action' with the specified args
do_smp() {
    local cmd="${1##--}" optcmd="" argcmd=""
    [[ -z ${action} ]] && die "Usage: do_smp <command> [command options] <command args>"
    shift; shift
    
    ALLPHOT_CMD_NAME="${cmd}"
    ALLPHOT_COMMAND="${ALLPHOT_PROGRAM_NAME} ${ALLPHOT_CMD_NAME}"
    
    [[ ${ALLPHOT_BINARY_NAME##*/} != ${ALLPHOT_PROGRAM_NAME} ]] && \
	ALLPHOT_COMMAND="${ALLPHOT_BINARY_NAME##*/}"
    
    modfile=$( ap_find_module "${action}" )
    (
	source "${ALLPHOT_DEFAULT_ACTIONS}" 2>/dev/null \
	    || die "Couldn't source ${ALLPHOT_DEFAULT_ACTIONS}"
	source "${modfile}" 2>/dev/null \
	    || die "Couldn't source ${modfile}"
	if [[ -z ${subaction} ]] ; then
	    check_do "do_${DEFAULT_ACTION:-usage}" "$@"
	else
	    is_function "do_${subaction}" \
		|| die -q "Action ${subaction} unknown"
	    check_do "do_${subaction}" "$@"
	fi
   )
    ## OLD CODE TO INTEGRATE ##
    j=1
    while test $# -gt 0; do
	echo " >>> Starting job ${j} on ${1}"
	"${action}" ${1}
	shift
	(( j += 1 ))
	while [[ $(jobs -r | wc -l) -ge ${njobs} ]]; do 
	    sleep 0.4
	    j=1
	done
    done
}
