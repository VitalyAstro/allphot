# -*-shell-script-*-

DESCRIPTION="Run ALLSTAR on a FITS image"
VERSION="4"

inherit options daophot process qa

### allstar action
describe_do() {
    echo "Perform crowded-star profile fitting photometry"
}

describe_do_options() {
    echo "--opt=<file>        : Option file as input (default: $(opt_file_path allstar))"
    echo "--option <OP>=<val> : Set option <OP> with value <val> (ex: TH=4)"
    echo "--in=<file>      : Input photometry (default: <input>.ap)"
    echo "--psf=<file>     : Input PSF file (default: <input>.psf)"
    echo "--out=<file>     : Output photometry file (default: <input>.nei)"
    echo "--sub=<FITS>     : Output residual image (default: <input>s.fits)"
}

describe_do_parameters() {
    echo "<FITS image>"
}

do_do() {
    local infile="" psffile="" outfile="" subfits="" options="" optfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --in=*)   infile="${1##*=}" ;;
	    --psf=*)  psffile="${1##*=}" ;;
	    --out=*)  outfile="${1##*=}" ;;
	    --sub=*)  subfits="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done
    local im=$(basename ${1%.*})
    
    allphot_setup --optfile="${optfile}" allstar "${1}"
    if [[ -n ${options} ]]; then
	for opt in ${options}; do
	    opt_set_val "${opt}" "${ALLPHOT_PROCDIR}/${ALLSTAR_OPT}"
	done
    fi
    daophot_allstar "${1}" "${psffile:-${im}.psf}" \
	"${infile:-${im}.ap}" "${outfile:-${im}.als}" "${subfits:-${im}s.fits}"
    allphot_do
}
