# -*-shell-script-*-

DESCRIPTION="Run DAOPHOT actions on FITS images and catalogues"
VERSION="4"

inherit options paths daophot process

daophot_options_description() {
    echo "--opt=<file>        : Option file as input (default: $(opt_file_path daophot))"
    echo "--option <OP>=<val> : Set option <OP> with value <val> (ex: TH=4)"
}

### opt action
describe_opt() {
    echo "Set options for DAOPHOT"
}

describe_opt_parameters() {
    echo "[<FITS image>]"
}

describe_opt_options() {
    echo "--in=<file>         : Option file as input (default: $(opt_file_path daophot))"
    echo "--option <OP>=<val> : Set option <OP> with value <val> (ex: TH=4)"
    echo "--dict=<file> : Dictionary to set options from FITS keywords"
    echo "--out=<file>  : DAOPHOT option file as output (default: input)"
}

do_opt() {
    local dictfile="" infile="" outfile="" options=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --dict=*) dictfile="${1##*=}" ;;
	    --in=*)   infile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --out=*)  outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '$1'" ;;
              *) break ;;
	esac
	shift
    done

    allphot_setup --optfile="${infile}" daophot "${1}"
    # update option from dictionnary
    local cmdoptfile="$(opt_file_path daophot)"
    if [[ -r ${dictfile} ]]; then
	[[ -z ${1} ]] && die -q "missing input FITS file for directory"
	opt_update_dict ${dictfile} "${optfile:-${cmdoptfile}}" "${1}"
    fi
    if [[ -n ${options} ]]; then
	for opt in ${options}; do
	    opt_set_val "${opt}" "${infile:-${cmdoptfile}}"
	done
    fi
    daophot_opt "${infile}"
    allphot_do
    [[ -n ${outfile} ]] && cp -f "${infile:-${cmdoptfile}}" "${outfile}"
}

### sky action
describe_sky() {
    echo "Compute the sky background and r.m.s."
}

describe_sky_parameters() {
    echo "<FITS image>"
}

do_sky() {
    allphot_setup daophot "${1}"
    daophot_attach "${1}"
    daophot_sky
    allphot_do
}

### find action
describe_find() {
    echo "Find stars on an image"
}

describe_find_options() {
    daophot_options_description
    echo "--out=<file>        : Output star list file (default: <input>.coo)"
}

describe_find_parameters() {
    echo "<FITS image>"
}

do_find() {
    local dictfile="" infile="" outfile="" options=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --out=*)  outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
   done

   allphot_setup --optfile="${optfile}" daophot "${1}"
   [[ -n ${options} ]] && daophot_opt "${options}"
   daophot_attach "${1}"
   daophot_find "${outfile:-$(basename ${1%.*}).coo}"
   allphot_do
}

### phot action
describe_phot() {
    echo "Perform aperture photometry"
}

describe_phot_options() {
    echo "--in=<file>         : Input star list file (default: <input>.coo)"
    echo "--out=<file>        : Output star list file (default: <input>.ap)"
    echo "--radius <RAD>=<val>: Set a aperture radius <RAD>"
    echo "--radfile=<file>    : Specifiy aperture radii file"
    echo "--nei=<file>        : Subtract neighbour stars from this file"
    echo "--psf=<file>        : PSF to subtract neighbours (default: <input>.psf)"
}

describe_phot_parameters() {
    echo "<FITS image>"
}

do_phot() {
    local infile="" outfile="" neifile="" 
    local psffile="" radfile="" radii=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --in=*)  infile="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --nei=*) neifile="${1##*=}" ;;
	    --psf=*) psffile="${1##*=}" ;;
	    --radfile=*) radfile="${1##*=}" ;;
    	    --radius) shift; radii="${radii} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    allphot_setup daophot "${1}"
    if [[ ! -e ${radfile} ]]; then
	radfile=${ALLPHOT_PROCDIR}/${PHOTO_OPT}
	cp -f ${ALLPHOT_OPT_DIR}/${PHOTO_OPT} ${radfile}
    fi
    if [[ -n ${radii} ]]; then
	for rad in ${radii}; do
	    opt_set_val "${rad}" ${radfile}
	done
    fi
    daophot_attach "${1}"
    local im=$(basename ${1%.*})
    if [[ -n ${neifile} ]]; then
	[[ -r ${psffile:=${im}.psf} ]] || die -q "could not read psf file: '${psffile}'"
	daophot_phot "${radfile}" "${neifile}" "${infile:-${neifile}}" "${outfile:-${im}.ap}"
    else
	daophot_phot "${radfile}" "${infile:-${im}.coo}" "${outfile:-${im}.ap}"
    fi
    allphot_do
}

### pick action
describe_pick() {
    echo "Pick PSF Stars"
}

describe_pick_options() {
    daophot_options_description
    echo "--out=<file>        : Output star list file (default: <input>.lst)"
    echo "--magfaint=<value>  : Magnitude of the faintest star (default: 13)"
    echo "--nstars=<value>    : Max number of stars to pick (default: 200)"    
}

describe_pick_parameters() {
    echo "<star file>"
}

do_pick() {
    local magfaint=13 nstars=100 optfile="" options=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --magfaint=*) magfaint="${1##*=}" ;;
	    --nstars=*) nstars="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    allphot_setup --optfile="${optfile}" daophot "${1}"
    [[ -n ${options} ]] && daophot_opt "${options}"
    daophot_pick "${1}" ${nstars} ${magfaint} "${outfile:-$(basename ${1%.*}).lst}"
    allphot_do
}

### psf action
describe_psf() {
    echo "Fit an analytical PSF given a star list"
}

describe_psf_options() {
    echo "--pho=<file>      : Input photometry (default: <input>.ap)"
    echo "--in=<file>      : Input PSF star list (default: <input>.lst)"
    echo "--out=<file>     : Output PSF file (default: <input>.psf)"
    echo "--nei=<file>     : Output neighbour file (default: <input>.nei)"
    echo "--opt=<file>        : Specify option file (default: ${DAOPHOT_OPT})"
    echo "--option <OP>=<val> : Pass option <OP> with value <val> (ex: TH=4)"
}

describe_psf_parameters() {
    echo "<FITS image>"
}

do_psf() {
    local optfile="" options=""
    local phofile="" lstfile="" psffile="" neifile="" 
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --opt=*) optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --pho=*) phofile="${1##*=}" ;;
	    --in=*)  lstfile="${1##*=}" ;;
	    --out=*) psffile="${1##*=}" ;;
	    --nei=*) neifile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    allphot_setup --optfile="${optfile}" daophot "${1}"
    [[ -n ${options} ]] && daophot_opt "${options}"
    daophot_attach "${1}"
    local im=$(basename ${1%.*})
    daophot_psf \
	"${phofile:-${im}.ap}" "${lstfile:-${im}.lst}" \
	"${psffile:-${im}.psf}" "${neifile:-${im}.nei}"
    allphot_do
}

### substar action
describe_substar() {
    echo "Subtract stars from an image with a scaled PSF"
}

describe_substar_options() {    
    echo "--in=<star file>   : Input photometry file (default: <in>.nei)"
    echo "--keep=<star file> : File with stars to keep (default: <in>.lst)"
    echo "--out=<FITS image> : Output subtracted image (default: <in>s.fits)"
}

describe_substar_parameters() {
    echo "<FITS image>"
}

do_substar() {
    local psffile="" infile="" keepfile="" subfits=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --psf=*)    psffile="${1##*=}" ;;
	    --in=*)     infile="${1##*=}" ;;
	    --keep=*)   keepfile="${1##*=}" ;;
	    --out=*)    subfits="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    local im=$(basename ${1%.*})
    allphot_setup daophot "${1}"
    daophot_attach "${1}"
    daophot_substar \
	"${psffile:-${im}.psf}" "${infile:-${im}.nei}" \
	"${keepfile}" "${subfits:-${im}s.fits}"
    allphot_do
}

### sort action
describe_sort() {
    echo "Sort a star file according to a given column"
}

describe_sort_options() {
    echo "--index=<val>   : Column index to sort (default: 1)"
    echo "--out=<file>    : Output file name (default: <input>.srt)"
    echo "--renum         : Renumber the star IDs"
}

describe_sort_parameters() {
    echo "<star file>"
}

do_sort() {
    local idx=1 renum=N
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --index=*) idx="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --renum) renum=Y ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    allphot_setup daophot "${1}"
    daophot_sort ${idx} "${1}" "${outfile:-$(basename ${1%.*}).srt}" ${renum}
    allphot_do
}

### offset action
describe_offset() {
    echo "Add offsets to the first 4 columns of a star file"
}

describe_offset_options() {
    echo "--id=<val> : Add <val> to ID (default: 0)"
    echo "--x=<val>  : Add <val> to x-coordinate (default: 0)"
    echo "--y=<val>  : Add <val> to y-coordinate (default: 0)"
    echo "--mag=<val>: Add <val> to magnitude (default: 0)"
    echo "--out=<file>  : Output file name (default <input>.off)"
}

describe_offset_parameters() {
    echo "<star file>"
}

do_offset() {
    local idoff=0 xoff=0 yoff=0 magoff=0 outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --id=*)  idoff=${1##*=} ;;
            --x=*)   xoff=${1##*=} ;;
	    --y=*)   yoff=${1##*=} ;;
	    --mag=*) magoff=${1##*=} ;;
	    --out=*)    outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    allphot_setup daophot "${1}"
    daophot_offset "${1}" ${idoff} ${xoff} ${yoff} ${magoff} "${outfile:-$(basename ${1%.*}).off}"
    allphot_do
}

### append action
describe_append() {
    echo "Concatenate two stellar data files"
}

describe_append_options() {
    echo "--out=<file>  : Output file name (default: <input1>.cmb)"
}

describe_append_parameters() {
    echo "<file 1> <file 2>"
}

do_append() {
    local outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --out=*) outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    allphot_setup daophot "${1}"
    daophot_append "${1}" "${2}" "${outfile:-$(basename ${1%.*}).cmb}"
    allphot_do
}


### append action
describe_help() {
    echo "Concatenate two stellar data files"
}

describe_append_options() {
    echo "--out=<file>  : Output file name (default: <input1>.cmb)"
}

describe_append_parameters() {
    echo "<file 1> <file 2>"
}

do_append() {
    local outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --out=*) outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    allphot_setup daophot "${1}"
    daophot_append "${1}" "${2}" "${outfile:-$(basename ${1%.*}).cmb}"
    allphot_do
}
