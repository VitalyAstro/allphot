# -*-shell-script-*-

DESCRIPTION="Run DAOPHOT actions on FITS images and catalogues"
DEFAULT_ACTION="list"

inherit options paths daophot process


# common to a lot of routines
daophot_help_description() {
    echo "--help        : shows help for this daophot action"
}

daophot_options_description() {
    daophot_help_description
    echo "--opt=FILE     : Set initial options values from FILE (default: $(opt_file_path daophot))"
    echo "--option OP=VAL : Set option OP with value VAL (ex: TH=4)"
}

daophot_action_usage() {
    [[ $# -lt 1 ]] && return
    local action=${1} desc="" line="" ifs_save="${IFS}" action_text=""
    is_function "describe_${action}" && desc=$(describe_${action})

    local actiontxt=${action}
    [[ ${action} == do ]] && actiontxt="do [default]"
    if is_function "describe_${action}_parameters" ; then
	action_text="${actiontxt} $(describe_${action}_parameters)"
    else
	action_text="${actiontxt}"
    fi
    
    write_kv_list_entry "${action_text}" "${desc:-(no description)}"

    if is_function "describe_${action}_options" ; then
	IFS=$'\n'
	local line
	for line in $(describe_${action}_options) ; do
	    write_kv_list_entry -p \
		"  ${line%%*( ):*}" \
		"  ${line##+([^:]):*( )}"
	done
		    IFS="${ifs_save}"
    fi
}

### LIST ###
describe_list() {
    echo "List all available daophot actions"
}

do_list() {
    local action desc
    local -a daophot_actions
    for action in $(set | \
	sed -n -e '/^do_\S\+ ()\s*$/s/^do_\(\S\+\).*/\1/p' | \
	grep -v 'action' | \
	sort ) ; do
	case "${action}" in
	    help|usage|version|list)
		continue
		;;
	    do) daophot_actions=(  "${action}" "${daophot_actions[@]}") ;;
	    ?*)	daophot_actions=( "${daophot_actions[@]}" "${action}" ) ;;
	esac
    done
    
    if is_output_mode brief; then
	for action in "${daophot_actions[@]}" ; do
	    echo "${action}"
	done
    else
	if [[ ${#daophot_actions[@]} -gt 0 ]] ; then
	    write_list_start "DAOPHOT actions:"
	    for action in "${daophot_actions[@]}" ; do
		desc=${desc:-No description available}
		is_function "describe_${action}" && desc=$(describe_${action})
    		local actiontxt=${action}
		[[ ${action} == do ]] && actiontxt="do [default]"
		write_kv_list_entry "${actiontxt}" "${desc}"
	    done
	fi
    fi
}

### OPTIONS ###
describe_opt() {
    echo "Set options for DAOPHOT"
}

describe_opt_parameters() {
    echo "[FITS]"
    echo "A FITS header is needed if the dict file contains fits() operator"
}

describe_opt_options() {
    daophot_options_description
    echo "--dict=DICT : Dictionary to set options from FITS keywords"
    echo "--out=OPT   : DAOPHOT option file as output (default: daophot.opt)"
}

do_opt() {
    local dictfile="" optfile="" outfile="" options=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --dict=*) dictfile="${1##*=}" ;;
            --help) daophot_action_usage opt && return ;;
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;	
	    --out=*)  outfile="${1##*=}" ;;       
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
	esac
	shift
    done

    # make a basic option file if not present, only setup if present
    allphot_setup --optfile="${optfile}" daophot

    # update option file from dictionary
    if [[ -r ${dictfile} ]]; then
	grep -q "fits(" ${dictfile} && [[ -z ${1} ]] && die -q "missing input FITS file for directory"
	opt_update_from_dict ${dictfile} "${ALLPHOT_OPTFILE}" "${1}"
    fi

    # update option file from single command options
    if [[ -n ${options} ]]; then
	for opt in ${options}; do
	    opt_set_val "${opt}" "${ALLPHOT_OPTFILE}"
	done
    fi

    daophot_opt "${optfile}"
    daophot_exit
    allphot_run daophot
    [[ -n ${outfile} ]] && \
	[[ ! ${ALLPHOT_OPTFILE} -ef ${outfile} ]] && \
	cp -f "${ALLPHOT_OPTFILE}" "${outfile}"
}

### SKY ###
describe_sky() {
    echo "Compute the sky background and r.m.s."
}

describe_sky_parameters() {
    echo "FITS"
}

describe_sky_options() {
    daophot_help_description
}

do_sky() {
    while [[ $# -gt 0 ]]; do
	case "${1}" in
            --help) daophot_action_usage sky && return ;;
	    --*) die -q "Unrecognized option '$1'" ;;
              *) break ;;
	esac
	shift
    done
    [[ $# -lt 1 ]] && daophot_action_usage sky && return
    allphot_setup daophot
    daophot_attach "${1}"
    daophot_sky
    daophot_exit
    allphot_run daophot
}

### FIND ###
describe_find() {
    echo "Find stars on an image"
}

describe_find_options() {
    daophot_options_description
    echo "--frames=N,N  : Number of frames averaged, summed (default: 1,1)"
    echo "--out=COO     : Output star list file (default: FITS.coo)"
}

describe_find_parameters() {
    echo "FITS"
}

do_find() {
    local optfile="" infile="" outfile="" options="" frames="1,1"
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage find && return ;;
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --frames=*)  frames="${1##*=}" ;;
	    --out=*)  outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
   done

   [[ $# -lt 1 ]] && daophot_action_usage find && return

   allphot_setup --optfile="${optfile}" daophot ${options}
   daophot_attach "${1}"
   daophot_find ${frames} "${outfile:-${1%.*}.coo}"
   daophot_exit
   allphot_run daophot
}

### PHOT ###
describe_phot() {
    echo "Perform aperture photometry"
}

describe_phot_options() {
    daophot_help_description
    echo "--in=STAR        : Input star list file (default: FITS.coo)"
    echo "--out=AP         : Output star list file (default: FITS.ap)"
    echo "--radius RAD=VAL : Set an aperture radius RAD (ex: A1=4)"
    echo "--rad=PHOTO      : Aperture radii file (default $(opt_file_path photo))"
    echo "--nei=STAR       : File of stars to subtract (default: FITS.als)"
    echo "--psf=PSF        : PSF to subtract neighbours (default: FITS.psf)"
}

describe_phot_parameters() {
    echo "FITS"
}

do_phot() {
    local infile="" outfile="" neifile="" 
    local psffile="" radfile="" radii=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage phot && return ;;
	    --in=*)  infile="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --nei=*) neifile="${1##*=}" ;;
	    --psf=*) psffile="${1##*=}" ;;
	    --rad=*) radfile="${1##*=}" ;;
    	    --radius) shift; radii="${radii} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage phot && return

    allphot_setup daophot

    # set up aperture photometry radii
    if [[ ! -e ${radfile} ]]; then
	radfile=${ALLPHOT_PROCDIR}/${PHOTO_OPT}
	cp -f ${ALLPHOT_OPTDIR}/${PHOTO_OPT} ${radfile}
    fi
    if [[ -n ${radii} ]]; then
	for rad in ${radii}; do
	    opt_set_val "${rad}" ${radfile}
	done
    fi

    daophot_attach "${1}"
    
    # take care of special case when psf is present
    local im=${1%.*}
    if [[ -n ${neifile} ]]; then
	[[ -r ${psffile:=${im}.psf} ]] || die -q "could not read psf file: '${psffile}'"
	daophot_phot "${radfile}" "${neifile}" "${infile:-${neifile}}" "${outfile:-${im}.ap}"
    else
	daophot_phot "${radfile}" "${infile:-${im}.coo}" "${outfile:-${im}.ap}"
    fi
    daophot_exit
    allphot_run daophot
}

### PICK ###
describe_pick() {
    echo "Pick PSF Stars"
}

describe_pick_options() {
    daophot_options_description
    echo "--out=LST       : Output star list file (default: FILE.lst)"
    echo "--magfaint=VAL  : Magnitude of the faintest star (default: 13)"
    echo "--nstars=N      : Max number of stars to pick (default: 200)"    
}

describe_pick_parameters() {
    echo "STAR"
    echo "STAR is any DAOPHOT photometry formatted file id,x,y,mag,sky"
}

do_pick() {
    local magfaint=13 nstars=100 optfile="" options=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage pick && return ;;
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --magfaint=*) magfaint="${1##*=}" ;;
	    --nstars=*) nstars="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage pick && return

    allphot_setup --optfile="${optfile}" daophot ${options}
    daophot_pick "${1}" ${nstars} ${magfaint} "${outfile:-${1%.*}.lst}"
    daophot_exit
    allphot_run daophot
}

### PSF ###
describe_psf() {
    echo "Fit an analytical PSF given a star list"
}

describe_psf_options() {
    daophot_options_description
    echo "--pho=STAR    : Input photometry (default: FITS.ap)"
    echo "--in=FILE     : Input PSF star list (default: FITS.lst)"
    echo "--out=PSF     : Output PSF file (default: FITS.psf)"
}

describe_psf_parameters() {
    echo "FITS"
}

do_psf() {
    local optfile="" options=""
    local phofile="" lstfile="" psffile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage psf && return ;;
	    --opt=*) optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --pho=*) phofile="${1##*=}" ;;
	    --in=*)  lstfile="${1##*=}" ;;
	    --out=*) psffile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage psf && return

    allphot_setup --optfile="${optfile}" daophot ${options}
    daophot_attach "${1}"
    local im=${1%.*}
    daophot_psf \
	"${phofile:-${im}.ap}" "${lstfile:-${im}.lst}" \
	"${psffile:-${im}.psf}"
    daophot_exit
    allphot_run daophot
}

### PEAK ###
describe_peak() {
    echo "Simple profile fitting given a PSF"
}

describe_peak_options() {
    daophot_help_description
    echo "--psf=PSF  : Input PSF file (default: FITS.psf)"
    echo "--in=STAR  : Input photometry file (default: FITS.ap)"
    echo "--out=PK   : Output photometry file (default: FITS.pk)"
}

describe_peak_parameters() {
    echo "FITS"
}

do_peak() {
    local psffile="" infile="" outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage peak && return ;;
	    --psf=*)    psffile="${1##*=}" ;;
	    --in=*)     infile="${1##*=}" ;;
	    --out=*)    outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage peak && return

    local im=${1%.*}

    allphot_setup daophot
    daophot_attach "${1}"
    daophot_peak "${infile:-${im}.ap}" "${psffile:-${im}.psf}" "${outfile:-${im}.pk}"
    daophot_exit
    allphot_run daophot
}

### GROUP ###
describe_group() {
    echo "Divide stars in natural groups"
}

describe_group_options() {
    daophot_options_description
    echo "--in=STAR     : Input star file (default: FITS.ap)"
    echo "--psf=PSF     : Input PSF file (default: FITS.psf)"
    echo "--out=GRP     : Output star file (default: FITS.grp)"
    echo "--overlap=VAL : Critical overlap (default: 1 sigma)"
}

describe_group_parameters() {
    echo "FITS"
}

do_group() {
    local overlap=1 psffile="" optfile="" options="" infile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage group && return ;;
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --overlap=*) overlap="${1##*=}" ;;
	    --in=*)  infile="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --psf=*)    psffile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage group && return

    local im=${1%.*}

    allphot_setup --optfile="${optfile}" daophot ${options}
    daophot_attach "${1}"
    daophot_group  "${infile:-${im}.ap}" "${psffile:-${im}.psf}" ${overlap} "${outfile:-${im}.grp}"
    daophot_exit
    allphot_run daophot
}

### NSTAR ###
describe_nstar() {
    echo "Simultaneous profile fitting for groups of stars"
}

describe_nstar_options() {
    daophot_options_description
    echo "--psf=PSF   : Input PSF file (default: FITS.psf)"
    echo "--in=GRP    : Input star group file (default: FITS.grp)"
    echo "--out=NST   : Output star list file (default: FITS.nst)"
}

describe_nstar_parameters() {
    echo "FITS"
}

do_nstar() {
    local psffile="" optfile="" options="" infile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage nstar && return ;;
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --in=*)  infile="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --psf=*)    psffile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage nstar && return

    local im=${1%.*}

    allphot_setup --optfile="${optfile}" daophot ${options}
    daophot_attach "${1}"
    daophot_nstar  "${infile:-${im}.grp}" "${psffile:-${im}.psf}" "${outfile:-${im}.nst}"
    daophot_exit
    allphot_run daophot
}

### SUBSTAR ###
describe_substar() {
    echo "Subtract stars from an image with a scaled PSF"
}

describe_substar_options() {
    daophot_help_description
    echo "--psf=PSF   : Input PSF file (default: FITS.psf)"
    echo "--in=STAR   : Input photometry file (default: FITS.nei)"
    echo "--keep=STAR : File with stars to keep (default: FITS.lst)"
    echo "--out=FITS  : Output subtracted image (default: FITSs.fits)"
}

describe_substar_parameters() {
    echo "FITS"
}

do_substar() {
    local psffile="" infile="" keepfile="" subfits=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage substar && return ;;
	    --psf=*)    psffile="${1##*=}" ;;
	    --in=*)     infile="${1##*=}" ;;
	    --keep=*)   keepfile="${1##*=}" ;;
	    --out=*)    subfits="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage substar && return

    local im=${1%.*}

    allphot_setup daophot
    daophot_attach "${1}"
    daophot_substar "${psffile:-${im}.psf}" "${infile:-${im}.nei}" "${keepfile}" "${subfits:-${im}s.fits}"
    daophot_exit
    allphot_run daophot
}

### SORT ###
describe_sort() {
    echo "Sort a star file according to a given column"
}

describe_sort_options() {
    daophot_help_description
    echo "--index=N   : Column index to sort (default: 1)"
    echo "--out=FILE  : Output file name (default: FILE.srt)"
    echo "--renum     : Renumber the star IDs"
}

describe_sort_parameters() {
    echo "FILE"
}

do_sort() {
    local idx=1 renum=N
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage sort && return ;;
	    --index=*) idx="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --renum) renum=Y ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage sort && return

    allphot_setup daophot
    daophot_sort ${idx} "${1}" "${outfile:-${1%.*}.srt}" ${renum}
    daophot_exit
    allphot_run daophot
}

### SELECT ###
describe_select() {
    echo "Select group of stars"
}

describe_select_options() {
    daophot_help_description
    echo "--min=N    : Minimum group size (default: 1)"
    echo "--max=N    : Maximum group size (default: 60)"
    echo "--out=GRP : Output group file (default: FILE.sel)"
}

describe_select_parameters() {
    echo "GRP"
}

do_select() {
    local outfile="" mingrp="" maxgrp=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage select && return ;;
	    --min=*)    mingrp="${1##*=}" ;;
	    --max=*)    maxgrp="${1##*=}" ;;
	    --out=*)    outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage select && return

    allphot_setup daophot
    daophot_select "${1}" ${mingrp} ${maxgrp} "${outfile:-${1%.*}.sel}"
    daophot_exit
    allphot_run daophot
}

### OFFSET ###
describe_offset() {
    echo "Add offsets to the first 4 columns of an ASCII file"
}

describe_offset_options() {
    daophot_help_description
    echo "--id=N     : Add N to ID (default: 0)"
    echo "--x=VAL    : Add VAL to x-coordinate (default: 0)"
    echo "--y=VAL    : Add VAL to y-coordinate (default: 0)"
    echo "--mag=VAL  : Add VAL to magnitude (default: 0)"
    echo "--out=FILE : Output file name (default FILE.off)"
}

describe_offset_parameters() {
    echo "FILE"
}

do_offset() {
    local idoff=0 xoff=0 yoff=0 magoff=0 outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage offset && return ;;
	    --id=*)  idoff=${1##*=} ;;
            --x=*)   xoff=${1##*=} ;;
	    --y=*)   yoff=${1##*=} ;;
	    --mag=*) magoff=${1##*=} ;;
	    --out=*)    outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage offset && return

    allphot_setup daophot
    daophot_offset "${1}" ${idoff} ${xoff} ${yoff} ${magoff} "${outfile:-${1%.*}.off}"
    daophot_exit
    allphot_run daophot
}

### APPEND ###
describe_append() {
    echo "Concatenate two stellar data files"
}

describe_append_options() {
    daophot_help_description
    echo "--out=FILE  : Output file name (default: FILE1.cmb)"
}

describe_append_parameters() {
    echo "FILE1 FILE2"
}

do_append() {
    local outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage append && return ;;
	    --out=*) outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 2 ]] && daophot_action_usage append && return

    allphot_setup daophot
    daophot_append "${1}" "${2}" "${outfile:-${1%.*}.cmb}"
    daophot_exit
    allphot_run daophot
}


### DUMP ###
describe_dump() {
    echo "Display small array of pixels in ascii"
}

describe_dump_options() {
    daophot_help_description
    echo "--xc=VAL  : X coordinate of central pixel (default: nrows/2)"
    echo "--yc=VAL  : Y coordinate of central pixel (default: ncols/2)"
    echo "--size=N  : Size of small array (default: 9)"
}

describe_dump_parameters() {
    echo "FITS"
}

do_dump() {
    local sz=9 xc="" yc=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage dump && return ;;
	    --xc=*)    xc="${1##*=}" ;;
	    --yc=*)    yc="${1##*=}" ;;
	    --size=*)  sz="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done
   [[ $# -lt 1 ]] && daophot_action_usage dump && return

    [[ -z ${xc} ]] && xc=$(calc $(fitskey -n -p NAXIS1 "${1}") / 2)
    [[ -z ${yc} ]] && yc=$(calc $(fitskey -n -p NAXIS2 "${1}") / 2)

    allphot_setup daophot
    daophot_attach "${1}"
    daophot_dump ${sz} ${xc} ${yc}
    daophot_exit
    allphot_run daophot
}

### FUDGE ###
describe_fudge() {
    echo "Fudge with image pixels (not recommended)"
}

describe_fudge_options() {    
    daophot_help_description
    echo "--out=FITS  : Output picture name (default: FITSs.fits)"
    echo "--border=N  : Border outside region (default: 0)"
    echo "--region=[x0:x1,y0:y1] : Image region to fudge, FITS coordinates "
    echo "--brightness=VAL : Value to replace with"
    echo "--order=N    : Order of the polynomial for extrapolation (default: 1)"
}

describe_fudge_parameters() {
    echo "FITS"
}

do_fudge() {
    local outfits="" border=0 region="" brightness="" order=1
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage fudge && return ;;
	    --border=*)  border="${1##*=}"    ;;
	    --region=*)  region="${1##*=}"  ;;
	    --brightness=*) brightness="${1##*=}"  ;;
	    --order=*)  order="${1##*=}"  ;;
	    --out=*)     outfits="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage fudge && return

    local x0=$(expr ${a} : '\[\([[:digit:]]*\):')
    local x1=$(expr ${a} : '.*:\([[:digit:]]*\),')
    local y0=$(expr ${a} : '.*,\([[:digit:]]*\):')
    local y1=$(expr ${a} : '.*:.*,.*:\([[:digit:]]*\)\]')

    local im=${1%.*}

    allphot_setup daophot
    daophot_attach "${1}"
    if [[ -z ${brightness} ]]; then
	daophot_fudge \
	    "${outfits:-${im}f.fits}" ${border} ${order} ${x0} ${x1} ${y0} ${y1}
    else
	daophot_fudge \
	    "${outfits:-${im}f.fits}" ${x0} ${x1} ${y0} ${y1} ${brightness}
    fi
    daophot_exit
    allphot_run daophot
}

### ADDSTAR ###
describe_addstar() {
    echo "Add stars to an image from a scaled PSF"
}

describe_addstar_options() {
    daophot_help_description
    echo "--psf=PSF       : Input PSF file (default: FITS.psf)"
    echo "--seed=N        : Input seed number (default: 0)"
    echo "--gain=VAL      : Input photons/ADU (default: from header)"
    echo "--in=STAR       : Input photometry file (default: random stars)"
    echo "--out=FITS      : Output picture name (default: FITSa.fits)"
    echo "--min=VAL       : Min magnitude (default: 10)"
    echo "--max=VAL       : Max magnitude (default: 15)"
    echo "--nstars=N      : Number of stars to add (default: 0)"
    echo "--nframes=N     : Number of frames to produce (default: 1)"
    echo "--prefix=STRING : Prefix stem to add to file names (default: fake)"
}

describe_addstar_parameters() {
    echo "FITS"
}

do_addstar() {
    local psffile="" seed=0  gain=1 infile="" minmag=10 maxmag=15 nframes=1 prefix=fake
    local infile="" outfits="" 
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage addstar && return ;;
	    --psf=*)     psffile="${1##*=}" ;;
	    --seed=*)    seed="${1##*=}"    ;;
	    --gain=*)    gain="${1##*=}"    ;;
	    --min=*)     minmag="${1##*=}"  ;;
	    --max=*)     maxmag="${1##*=}"  ;;
	    --nstars=*)  nstars="${1##*=}"  ;;
	    --nframes=*) nframes="${1##*=}" ;;
	    --in=*)      infile="${1##*=}"  ;;
	    --out=*)     outfits="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage addstar && return

    local im=${1%.*}

    allphot_setup daophot
    daophot_attach "${1}"
    if [[ -z ${infile} ]]; then
	daophot_addstar \
	    "${psffile:-${im}.psf}" ${seed} ${gain} \
	    ${minmag} ${maxmag} ${nstars} ${nframes} "${prefix}"
    else
	daophot_addstar \
	    "${psffile:-${im}.psf}" ${seed} ${gain} \
	    "${infile}" "${outfits:-${im}a.fits}"
    fi
    daophot_exit
    allphot_run daophot
}

### DO ###
describe_do() {
    echo "Run your own DAOPHOT session using ALLPHOT API"
}

describe_do_parameters() {
    echo "FILE [ARG...]"
}

describe_do_options() {
    daophot_help_description
}

do_do() {
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage do && return ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
            *) break ;;
        esac
	shift
    done

    [[ $# -lt 1 ]] && daophot_action_usage do && return

    allphot_setup daophot
    . $@
    allphot_run daophot
}
