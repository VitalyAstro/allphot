# -*-shell-script-*-

DESCRIPTION="Run DAOPHOT actions on FITS images and catalogues"
DEFAULT_ACTION="do"

inherit options paths daophot process


# common to a lot of routines
daophot_help_description() {
    echo "--help        : shows help for this daophot action"
}

daophot_options_description() {
    daophot_help_description
    echo "--opt=<file>        : Initial option file (default: $(opt_file_path daophot))"
    echo "--option <OP>=<val> : Set option <OP> with value <val> (ex: TH=4)"
}

daophot_action_usage() {
    [[ $# -lt 1 ]] && return
    local action=${1} desc="" line="" ifs_save="${IFS}" action_text=""
    is_function "describe_${action}" && desc=$(describe_${action} )    
    if is_function "describe_${action}_parameters" ; then
	action_text="${action} $(describe_${action}_parameters)"
    else
	action_text="${action}"
    fi
    
    write_kv_list_entry "${action_text}" "${desc:-(no description)}"
    
    if is_function "describe_${action}_options" ; then
	IFS=$'\n'
	local line
	for line in $(describe_${action}_options) ; do
	    write_kv_list_entry -p \
		"  ${line%%*( ):*}" \
		"  ${line##+([^:]):*( )}"
	done
		    IFS="${ifs_save}"
    fi
}

### LIST ###
describe_list() {
    echo "List all available daophot actions"
}

do_list() {
    [[ $# -gt 0 ]] && die -q "does not take any parameters"
    
    local action desc
    local -a daophot_actions
    for action in $(set | \
	sed -n -e '/^do_\S\+ ()\s*$/s/^do_\(\S\+\).*/\1/p' | \
	grep -v 'action' | \
	sort ) ; do
	case "${action}" in
	    help|usage|version)
		continue
		;;
	    ?*)	daophot_actions=( "${daophot_actions[@]}" "${action}" ) ;;
	esac
    done
    
    if is_output_mode brief; then
	# This is mainly intended for bash completion
	echo "help"
	echo "usage"
	echo "version"
	for action in "${daophot_actions[@]}" ; do
	    echo "${action}"
	done
    else
	write_list_start "Built-in actions:"
	write_kv_list_entry "help"			"Display a help message"
	write_kv_list_entry "usage"			"Display a usage message"
	write_kv_list_entry "version"		"Display version information"
	
	if [[ ${#daophot_actions[@]} -gt 0 ]] ; then
	    echo
	    write_list_start "DAOPHOT actions:"
	    for action in "${daophot_actions[@]}" ; do
		desc=${desc:-No description available}
		is_function "describe_${action}" && desc=$(describe_${action} )
		write_kv_list_entry "${action}" "${desc}"
	    done
	fi
    fi
}

### OPTIONS ###
describe_opt() {
    echo "Set options for DAOPHOT"
}

describe_opt_parameters() {
    echo "[<FITS header>]"
}

describe_opt_options() {
    daophot_options_description
    echo "--dict=<file> : Dictionary to set options from FITS keywords"
    echo "--out=<file>  : DAOPHOT option file as output (default: input)"
}

do_opt() {
    local dictfile="" optfile="" outfile="" options=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --dict=*) dictfile="${1##*=}" ;;
            --help) daophot_action_usage opt && return ;;
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;	
	    --out=*)  outfile="${1##*=}" ;;       
	    --*) die -q "Unrecognized option '$1'" ;;
              *) break ;;
	esac
	shift
    done

    allphot_setup --optfile="${optfile}" daophot "${1}"

    # update option file from dictionnary
    if [[ -r ${dictfile} ]]; then
	grep -q "fits(" ${dictfile} && [[ -z ${1} ]] && die -q "missing input FITS file for directory"
	opt_update_from_dict ${dictfile} "${ALLPHOT_OPTFILE}" "${1}"
    fi

    # update option file from single command options
    if [[ -n ${options} ]]; then
	for opt in ${options}; do
	    opt_set_val "${opt}" "${ALLPHOT_OPTFILE}"
	done
    fi

    daophot_opt "${optfile}"
    allphot_run daophot
    [[ -n ${outfile} ]] && cp -f "${ALLPHOT_OPTFILE}" "${outfile}"
}

### SKY ###
describe_sky() {
    echo "Compute the sky background and r.m.s."
}

describe_sky_parameters() {
    echo "<FITS image>"
}

describe_sky_options() {
    daophot_help_description
}

do_sky() {
    while [[ $# -gt 0 ]]; do
	case "${1}" in
            --help) daophot_action_usage sky && return ;;
	    --*) die -q "Unrecognized option '$1'" ;;
              *) break ;;
	esac
	shift
    done
    [[ $# -lt 1 ]] && daophot_action_usage sky && die -q "missing FITS image"
    allphot_setup daophot "${1}"
    daophot_attach "${1}"
    daophot_sky
    allphot_run daophot
}

### FIND ###
describe_find() {
    echo "Find stars on an image"
}

describe_find_options() {
    daophot_options_description
    echo "--frames=<num>,<num>: Number of frames averaged, summed (default: 1,1)"
    echo "--out=<file>        : Output star list file (default: <input>.coo)"
}

describe_find_parameters() {
    echo "<FITS image>"
}

do_find() {
    local optfile="" infile="" outfile="" options="" frames="1,1"
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage find && return ;;
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --frames=*)  frames="${1##*=}" ;;
	    --out=*)  outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
   done

   [[ $# -lt 1 ]] && daophot_action_usage find && die -q "missing FITS image"

   allphot_setup --optfile="${optfile}" daophot "${1}"
   [[ -n ${options} ]] && daophot_opt "${options}"
   daophot_attach "${1}"
   daophot_find ${frames} "${outfile:-$(basename ${1%.*}).coo}"
   allphot_run daophot
}

### PHOT ###
describe_phot() {
    echo "Perform aperture photometry"
}

describe_phot_options() {
    daophot_help_description
    echo "--in=<file>         : Input star list file (default: <input>.coo)"
    echo "--out=<file>        : Output star list file (default: <input>.ap)"
    echo "--radius <RAD>=<val>: Set a aperture radius <RAD>"
    echo "--radfile=<file>    : Specifiy aperture radii file (default $(opt_file_path photo))"
    echo "--nei=<file>        : Subtract neighbour stars from this file"
    echo "--psf=<file>        : PSF to subtract neighbours (default: <input>.psf)"
}

describe_phot_parameters() {
    echo "<FITS image>"
}

do_phot() {
    local infile="" outfile="" neifile="" 
    local psffile="" radfile="" radii=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage phot && return ;;
	    --in=*)  infile="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --nei=*) neifile="${1##*=}" ;;
	    --psf=*) psffile="${1##*=}" ;;
	    --radfile=*) radfile="${1##*=}" ;;
    	    --radius) shift; radii="${radii} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage phot && die -q "missing FITS image"

    allphot_setup daophot "${1}"
    if [[ ! -e ${radfile} ]]; then
	radfile=${ALLPHOT_PROCDIR}/${PHOTO_OPT}
	cp -f ${ALLPHOT_OPTDIR}/${PHOTO_OPT} ${radfile}
    fi
    if [[ -n ${radii} ]]; then
	for rad in ${radii}; do
	    opt_set_val "${rad}" ${radfile}
	done
    fi
    daophot_attach "${1}"
    local im=$(basename ${1%.*})
    if [[ -n ${neifile} ]]; then
	[[ -r ${psffile:=${im}.psf} ]] || die -q "could not read psf file: '${psffile}'"
	daophot_phot "${radfile}" "${neifile}" "${infile:-${neifile}}" "${outfile:-${im}.ap}"
    else
	daophot_phot "${radfile}" "${infile:-${im}.coo}" "${outfile:-${im}.ap}"
    fi
    allphot_run daophot
}

### PICK ###
describe_pick() {
    echo "Pick PSF Stars"
}

describe_pick_options() {
    daophot_options_description
    echo "--out=<file>        : Output star list file (default: <input>.lst)"
    echo "--magfaint=<value>  : Magnitude of the faintest star (default: 13)"
    echo "--nstars=<value>    : Max number of stars to pick (default: 200)"    
}

describe_pick_parameters() {
    echo "<star file>"
}

do_pick() {
    local magfaint=13 nstars=100 optfile="" options=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage pick && return ;;
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --magfaint=*) magfaint="${1##*=}" ;;
	    --nstars=*) nstars="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage pick && die -q "missing star file"

    allphot_setup --optfile="${optfile}" daophot "${1}"
    [[ -n ${options} ]] && daophot_opt "${options}"
    daophot_pick "${1}" ${nstars} ${magfaint} "${outfile:-$(basename ${1%.*}).lst}"
    allphot_run daophot
}

### PSF ###
describe_psf() {
    echo "Fit an analytical PSF given a star list"
}

describe_psf_options() {
    daophot_options_description
    echo "--pho=<file>      : Input photometry (default: <input>.ap)"
    echo "--in=<file>      : Input PSF star list (default: <input>.lst)"
    echo "--out=<file>     : Output PSF file (default: <input>.psf)"
}

describe_psf_parameters() {
    echo "<FITS image>"
}

do_psf() {
    local optfile="" options=""
    local phofile="" lstfile="" psffile="" neifile="" 
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage psf && return ;;
	    --opt=*) optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --pho=*) phofile="${1##*=}" ;;
	    --in=*)  lstfile="${1##*=}" ;;
	    --out=*) psffile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage psf && die -q "missing FITS image"

    allphot_setup --optfile="${optfile}" daophot "${1}"
    [[ -n ${options} ]] && daophot_opt "${options}"
    daophot_attach "${1}"
    local im=$(basename ${1%.*})
    daophot_psf \
	"${phofile:-${im}.ap}" "${lstfile:-${im}.lst}" \
	"${psffile:-${im}.psf}"
    allphot_run daophot
}

### PEAK ###
describe_peak() {
    echo "Simple profile fitting given a PSF"
}

describe_peak_options() {
    daophot_help_description
    echo "--psf=<psf file>   : Input PSF file (default: <in>.psf)"
    echo "--in=<star file>   : Input photometry file (default: <in>.ap)"
    echo "--out=<file>  : Output file name (default: <input>.pk)"
}

describe_peak_parameters() {
    echo "<FITS image>"
}

do_peak() {
    local psffile="" infile="" outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage peak && return ;;
	    --psf=*)    psffile="${1##*=}" ;;
	    --in=*)     infile="${1##*=}" ;;
	    --out=*)    outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage peak && die -q "missing FITS image"
    allphot_setup daophot "${1}"
    local im=$(basename ${1%.*})
    daophot_attach "${1}"
    daophot_peak "${infile:-${im}.ap}" "${psffile:-${im}.psf}" "${outfile:-$(basename ${1%.*}).pk}"
    allphot_run daophot
}

### GROUP ###
describe_group() {
    echo "Divide stars in natural groups"
}

describe_group_options() {
    daophot_options_description
    echo "--in=<file>        : Input star list file (default: <fits>.ap)"
    echo "--psf=<psf file>   : Input PSF file (default: <fits>.psf)"
    echo "--out=<file>        : Output star list file (default: <fits>.grp)"
    echo "--overlap=<value>   : Critical overlap (default: 1sigma)"
}

describe_group_parameters() {
    echo "<FITS image>"
}

do_group() {
    local overlap=1 psffile="" optfile="" options="" infile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage group && return ;;
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --overlap=*) overlap="${1##*=}" ;;
	    --in=*)  infile="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --psf=*)    psffile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage group && die -q "missing FITS image"
    allphot_setup --optfile="${optfile}" daophot "${1}"
    [[ -n ${options} ]] && daophot_opt "${options}"
    daophot_attach "${1}"
    daophot_group  "${infile:-${im}.ap}" "${psffile:-${im}.psf}" ${overlap} "${outfile:-$(basename ${1%.*}).grp}"
    allphot_run daophot
}

### NSTAR ###
describe_nstar() {
    echo "Simultaneous profile fitting for groups of stars"
}

describe_nstar_options() {
    daophot_options_description
    echo "--psf=<psf file>   : Input PSF file (default: <fits>.psf)"
    echo "--in=<file>        : Input star group file (default: <fits>.grp)"
    echo "--out=<file>        : Output star list file (default: <fits>.grp)"
}

describe_nstar_parameters() {
    echo "<FITS image>"
}

do_nstar() {
    local psffile="" optfile="" options="" infile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage nstar && return ;;
	    --opt=*)  optfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --in=*)  infile="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --psf=*)    psffile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage nstar && die -q "missing FITS image"
    allphot_setup --optfile="${optfile}" daophot "${1}"
    [[ -n ${options} ]] && daophot_opt "${options}"
    daophot_attach "${1}"
    daophot_nstar  "${infile:-${im}.grp}" "${psffile:-${im}.psf}" "${outfile:-$(basename ${1%.*}).nst}"
    allphot_run daophot
}

### SUBSTAR ###
describe_substar() {
    echo "Subtract stars from an image with a scaled PSF"
}

describe_substar_options() {
    daophot_help_description
    echo "--psf=<psf file>   : Input PSF file (default: <in>.psf)"
    echo "--in=<star file>   : Input photometry file (default: <in>.nei)"
    echo "--keep=<star file> : File with stars to keep (default: <in>.lst)"
    echo "--out=<FITS image> : Output subtracted image (default: <in>s.fits)"
}

describe_substar_parameters() {
    echo "<FITS image>"
}

do_substar() {
    local psffile="" infile="" keepfile="" subfits=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage substar && return ;;
	    --psf=*)    psffile="${1##*=}" ;;
	    --in=*)     infile="${1##*=}" ;;
	    --keep=*)   keepfile="${1##*=}" ;;
	    --out=*)    subfits="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage substar && die -q "missing FITS image"

    local im=$(basename ${1%.*})
    allphot_setup daophot "${1}"
    daophot_attach "${1}"
    daophot_substar \
	"${psffile:-${im}.psf}" "${infile:-${im}.nei}" \
	"${keepfile}" "${subfits:-${im}s.fits}"
    allphot_run daophot
}

### SORT ###
describe_sort() {
    echo "Sort a star file according to a given column"
}

describe_sort_options() {
    daophot_help_description
    echo "--index=<val>   : Column index to sort (default: 1)"
    echo "--out=<file>    : Output file name (default: <input>.srt)"
    echo "--renum         : Renumber the star IDs"
}

describe_sort_parameters() {
    echo "<star file>"
}

do_sort() {
    local idx=1 renum=N
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage sort && return ;;
	    --index=*) idx="${1##*=}" ;;
	    --out=*) outfile="${1##*=}" ;;
	    --renum) renum=Y ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage sort && die -q "missing star file"

    allphot_setup daophot "${1}"
    daophot_sort ${idx} "${1}" "${outfile:-$(basename ${1%.*}).srt}" ${renum}
    allphot_run daophot
}

### SELECT ###
describe_select() {
    echo "Select group of stars"
}

describe_select_options() {
    daophot_help_description
    echo "--min=<value>  : Minimum group size (default: 1)"
    echo "--max=<value>  : Maximum group size (default: 60)"
    echo "--out=<new group file>  : Output file name (default:<input>.sel)"
}

describe_select_parameters() {
    echo "<group file>"
}

do_select() {
    local outfile="" mingrp="" maxgrp=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage select && return ;;
	    --min=*)    mingrp="${1##*=}" ;;
	    --max=*)    maxgrp="${1##*=}" ;;
	    --out=*)    outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage select && die -q "missing group file"

    allphot_setup daophot "${1}"
    local im=$(basename ${1%.*})
    daophot_select "${1}" ${mingrp} ${maxgrp} "${outfile:-$(basename ${1%.*}).sel}"
    allphot_run daophot
}

### OFFSET ###
describe_offset() {
    echo "Add offsets to the first 4 columns of a star file"
}

describe_offset_options() {
    daophot_help_description
    echo "--id=<val> : Add <val> to ID (default: 0)"
    echo "--x=<val>  : Add <val> to x-coordinate (default: 0)"
    echo "--y=<val>  : Add <val> to y-coordinate (default: 0)"
    echo "--mag=<val>: Add <val> to magnitude (default: 0)"
    echo "--out=<file>  : Output file name (default <input>.off)"
}

describe_offset_parameters() {
    echo "<star file>"
}

do_offset() {
    local idoff=0 xoff=0 yoff=0 magoff=0 outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage offset && return ;;
	    --id=*)  idoff=${1##*=} ;;
            --x=*)   xoff=${1##*=} ;;
	    --y=*)   yoff=${1##*=} ;;
	    --mag=*) magoff=${1##*=} ;;
	    --out=*)    outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage offset && die -q "missing star file"

    allphot_setup daophot "${1}"
    daophot_offset "${1}" ${idoff} ${xoff} ${yoff} ${magoff} "${outfile:-$(basename ${1%.*}).off}"
    allphot_run daophot
}

### APPEND ###
describe_append() {
    echo "Concatenate two stellar data files"
}

describe_append_options() {
    daophot_help_description
    echo "--out=<file>  : Output file name (default: <input1>.cmb)"
}

describe_append_parameters() {
    echo "<file 1> <file 2>"
}

do_append() {
    local outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage append && return ;;
	    --out=*) outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 2 ]] && daophot_action_usage append && die -q "missing files"

    allphot_setup daophot "${1}"
    daophot_append "${1}" "${2}" "${outfile:-$(basename ${1%.*}).cmb}"
    allphot_run daophot
}


### DUMP ###
describe_dump() {
    echo "Display small array of pixels in ascii"
}

describe_dump_options() {
    daophot_help_description
    echo "--xc=<value>  : X coordinate of central pixel (default: nrows/2)"
    echo "--yc=<value>  : Y coordinate of central pixel (default: ncols/2)"
    echo "--size=<value>  : Size of small array (default: 9)"
}

describe_dump_parameters() {
    echo "<FITS image>"
}

do_dump() {
    local sz=9 xc="" yc=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage dump && return ;;
	    --xc=*)    xc="${1##*=}" ;;
	    --yc=*)    yc="${1##*=}" ;;
	    --size=*)  sz="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done
   [[ $# -lt 1 ]] && daophot_action_usage dump && die -q "missing FITS image"

    [[ -z ${xc} ]] && xc=$(calc $(fitskey -n -p NAXIS1 "${1}") / 2)
    [[ -z ${yc} ]] && yc=$(calc $(fitskey -n -p NAXIS2 "${1}") / 2)
    allphot_setup daophot "${1}"
    daophot_attach "${1}"
    daophot_dump ${sz} ${xc} ${yc}
    allphot_run daophot
}

### FUDGE ###
describe_fudge() {
    echo "Fudge with image pixels (not recommended)"
}

describe_fudge_options() {    
    daophot_help_description
    echo "--out=<fits file>  : Output picture name (default: <input>s.fits)"
    echo "--border=<number>  : Border outside region (default: 0)"
    echo "--region=[x0:x1,y0:y1] : Image region to fudge, FITS coordinates "
    echo "--brightness=<value> : Value to replace with"
    echo "--order=<number>     : Order of the polynomial for extrapolation (default: 1)"
}

describe_fudge_parameters() {
    echo "<FITS image>"
}

do_fudge() {
    local outfits="" border=0 region="" brightness="" order=1
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage fudge && return ;;
	    --border=*)  border="${1##*=}"    ;;
	    --region=*)  region="${1##*=}"  ;;
	    --brightness=*) brightness="${1##*=}"  ;;
	    --order=*)  order="${1##*=}"  ;;
	    --out=*)     outfits="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage fudge && die -q "missing FITS image"

    local x0=$(expr ${a} : '\[\([[:digit:]]*\):')
    local x1=$(expr ${a} : '.*:\([[:digit:]]*\),')
    local y0=$(expr ${a} : '.*,\([[:digit:]]*\):')
    local y1=$(expr ${a} : '.*:.*,.*:\([[:digit:]]*\)\]')

    local im=$(basename ${1%.*})
    allphot_setup daophot "${1}"
    daophot_attach "${1}"
    if [[ -n ${brightness} ]]; then
	daophot_fudge \
	    "${outfits:-${im}f.fits}" ${x0} ${x1} ${y0} ${y1} ${brightness}
    else
	daophot_fudge \
	    "${outfits:-${im}f.fits}" ${border} ${order} ${x0} ${x1} ${y0} ${y1}
    fi
    allphot_run daophot
}

### ADDSTAR ###
describe_addstar() {
    echo "Add stars to an image from a scaled PSF"
}

describe_addstar_options() {
    daophot_help_description
    echo "--psf=<psf file>   : Input PSF file (default: <in>.psf)"
    echo "--seed=<number>    : Input seed number (default: 0)"
    echo "--gain=<number>    : Input photons/ADU (default: from header)"
    echo "--in=<star file>   : Input photometry file (default: random stars)"
    echo "--out=<FITS image> : Output picture name (default: <input>a.fits)"
    echo "--min=<number>     : Min magnitude (default: )"
    echo "--max=<number>     : Max magnitude (default: )"
    echo "--nstars=<number>  : Number of stars to add (default: 0)"
    echo "--nframes=<number> : Number of frames to produce (default: 1)"
    echo "--prefix=<string>  : Prefix stem to add to file names (default: fake)"
}

describe_addstar_parameters() {
    echo "<FITS image>"
}

do_addstar() {
    local psffile="" seed=0  gain=1 infile="" minmag=10 maxmag=15 nframes=1 prefix=fake
    local infile="" outfits="" 
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --help) daophot_action_usage addstar && return ;;
	    --psf=*)     psffile="${1##*=}" ;;
	    --seed=*)    seed="${1##*=}"    ;;
	    --gain=*)    gain="${1##*=}"    ;;
	    --min=*)     minmag="${1##*=}"  ;;
	    --max=*)     maxmag="${1##*=}"  ;;
	    --nstars=*)  nstars="${1##*=}"  ;;
	    --nframes=*) nframes="${1##*=}" ;;
	    --in=*)      infile="${1##*=}"  ;;
	    --out=*)     outfits="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

   [[ $# -lt 1 ]] && daophot_action_usage addstar && die -q "missing FITS image"

    local im=$(basename ${1%.*})
    allphot_setup daophot "${1}"
    daophot_attach "${1}"
    if [[ -z ${infile} ]]; then
	daophot_addstar \
	    "${psffile:-${im}.psf}" ${seed} ${gain} \
	    ${minmag} ${maxmag} ${nstars} ${nframes} "${prefix}"
    else
	daophot_addstar \
	    "${psffile:-${im}.psf}" ${seed} ${gain} \
	    "${infile}" "${outfits:-${im}a.fits}"
    fi
    allphot_run daophot
}

### DO ###
describe_do() {
    echo "Run your own DAOPHOT recipe"
}

describe_do_parameters() {
    echo "<recipe file> [arg1 ... arg]"
}

do_do() {
   [[ $# -lt 1 ]] && daophot_action_usage do && die -q "missing recipe file"
    local infile="${1}"
    shift
    allphot_setup --optfile="${optfile}" daophot "${1}"
    source "${infile}" $@
    allphot_run daophot
}
