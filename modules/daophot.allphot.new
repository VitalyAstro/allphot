# -*-bash-*-

DESCRIPTION="Run DAOPHOT actions"
VERSION="4"

inherit options paths daophot process qa

# get_psf_fwhm <psf file>
get_psf_fwhm() {
    awk 'NR==2 {print ($1+$2)*1.176; exit}' ${1} 2> /dev/null
}

### opt action
describe_opt() {
    echo "Set options for DAOPHOT"
}

describe_opt_parameters() {
    echo "[<FITS image>]"
}

describe_opt_options() {
    echo "--dict=<file>       : Dictionary to set options from FITS keywords"
    echo "--in=<file>         : DAOPHOT option file as input (default ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT})"
    echo "--out=<file>        : DAOPHOT option file as output (default: daophot.opt)"
    echo "--option <OP>=<val> : Set option <OP> with value <val> (ex: TH=4)"
}

do_opt() {
    unset DAOPHOT_OUT
    local dictfile="" outfile="" options=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --dict=*) dictfile="${1##*=}" ;;
	    --in=*)   DAOPHOT_OPTFILE="${1##*=}" ;;
	    --out=*)  DAOPHOT_OUT[0]="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '$1'" ;;
              *) break ;;
	esac
	shift
    done

    # update option from dictionnary
    if [[ -r ${dictfile} ]]; then
	[[ -z ${1} ]] && die -q "missing input FITS file"
	option_update_from_dict ${dict} ${outfile} ${1}
    fi

    # process
    DAOPHOT_OUT[0]="${outfile}" 
    allphot_setup ${1}
    allphot_setup_options --extra="${options}" ${outfile}
    allphot_setup_files --out="${outfile}"
    allphot_run opt
    allphot_cleanup
}

### sky action
describe_sky() {
    echo "Compute the sky background and r.m.s."
}

describe_sky_parameters() {
    echo "<FITS image>"
}

do_sky() {
    unset DAOPHOT_IN
    DAOPHOT_IN[0]="${1}"
    daophot_run sky
}

### find action
describe_find() {
    echo "Find stars on an image"
}

describe_find_options() {
    echo "--opt=<file>        : Specify option file (default: ${DAOPHOT_OPT})"
    echo "--option <OP>=<val> : Pass option <OP> with value <val> (ex: TH=4)"
    echo "--out=<file>        : Output star list file (default: <input>.coo)"
}

describe_find_parameters() {
    echo "<FITS image>"
}

do_find() {    
    unset DAOPHOT_IN DAOPHOT_OUT
    DAOPHOT_OPTFILE="${DAOPHOT_OPT}"
    DAOPHOT_OPTIONS=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --opt) DAOPHOT_OPTFILE="${1##*=}" ;;
	    --option) shift; DAOPHOT_OPTIONS="${DAOPHOT_OPTIONS} ${1/ //}" ;;
	    --out=*) DAOPHOT_OUT[0]="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
   done

    [[ -z ${DAOPHOT_OUT[0]} ]] && DAOPHOT_OUT[0]="${1%.*}.coo"
    
    allphot_begin
    allphot_attach ${1}
    allphot_run daophot find
    allphot_end
}

### phot action
describe_phot() {
    echo "Perform aperture photometry"
}

describe_phot_options() {
    echo "--in=<file>         : Input star list file (default: <input>.coo)"
    echo "--out=<file>        : Output star list file (default: <input>.ap)"
    echo "--radius <RAD>=<val>: Set a aperture radius <RAD>"
    echo "--neifile=<file>    : Subtract neighbour stars from this file"
    echo "--psffile=<file>    : PSF to subtract neighbours (default: <input>.psf)"
}

describe_phot_parameters() {
    echo "<FITS image>"
}

do_phot() {
    unset DAOPHOT_IN DAOPHOT_OUT
    DAOPHOT_IN[0]="${PHOTO_OPT}"
    DAOPHOT_OPTFILE="${DAOPHOT_OPT}"
    local radii="" neifile="" psffile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --in=*) DAOPHOT_IN[1]="${1##*=}";;
	    --out=*) DAOPHOT_OUT[0]="${1##*=}" ;;
	    --neifile=*) neifile="${1##*=}" ;;
	    --optfile=*) DAOPHOT_IN[0]="${1##*=}" ;;
	    --psffile=*) psffile="${1##*=}" ;;
    	    --radius) shift; radii="${radii} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ -e ${DAOPHOT_IN[0]} ]] || cp ${ALLPHOT_OPT_DIR}/${PHOTO_OPT} ${DAOPHOT_IN[0]}

    if [[ -n ${radii} ]]; then
	for rad in ${radii}; do
	    option_set_value "${rad}" "${DAOPHOT_IN[0]}"
	done
    fi

    if [[ -n ${neifile} ]]; then
	[[ -z ${psffile} ]] && psffile=${infits%.*}.psf
	[[ -r ${psffile} ]] || die -q "could not read psf file: '${psffile}'"
	DAOPHOT_IN[1]="${neifile}"
	DAOPHOT_IN[2]="${DAOPHOT[1]}"
    else
	mv -f ${psffile}{,.sav}
    fi

    [[ -z ${DAOPHOT_IN[1]} ]]  && DAOPHOT_IN[0]="${1%.*}.coo"
    [[ -z ${DAOPHOT_OUT[0]} ]] && DAOPHOT_OUT[0]="${1%.*}.ap"
    daophot_run phot ${1}
    [[ -n ${neifile} ]] && mv -f ${psffile}{.sav,}
}

### pick action
describe_pick() {
    echo "Pick PSF Stars"
}

describe_pick_options() {
    echo "--out=<file>        : Output star list file (default: <input>.lst)"
    echo "--magfaint=<value>  : Magnitude of the faintest star (default: 13)"
    echo "--nstars=<value>    : Max number of stars to pick (default: 200)"
    echo "--opt=<file>        : Specify option file (default: ${DAOPHOT_OPT})"
    echo "--option <OP>=<val> : Pass option <OP> with value <val> (ex: TH=4)"
}

describe_pick_parameters() {
    echo "<star file>"
}

do_pick() {
    unset DAOPHOT_IN DAOPHOT_OUT
    DAOPHOT_OPTFILE="${DAOPHOT_OPT}"
    DAOPHOT_OPTIONS=""
    DAOPHOT_IN[1]=200
    DAOPHOT_IN[2]=13

    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --opt) DAOPHOT_OPTFILE="${1##*=}" ;;
	    --option) shift; DAOPHOT_OPTIONS="${DAOPHOT_OPTIONS} ${1/ //}" ;;
	    --magfaint=*) DAOPHOT_IN[2]="${1##*=}" ;;
	    --nstars=*) DAOPHOT_IN[1]="${1##*=}" ;;
	    --out=*) DAOPHOT_OUT[0]="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    DAOPHOT_IN[0]=${1}
    [[ -z ${DAOPHOT_OUT[0]} ]] && DAOPHOT_OUT[0]="${1%.*}.lst"

    daophot_run pick
}

### psf action
describe_psf() {
    echo "Fit an analytical PSF given a star list"
}

describe_psf_options() {
    echo "--inpho=<file>      : Input photometry (default: <input>.ap)"
    echo "--inlst=<file>      : Input PSF star list (default: <input>.lst)"
    echo "--outpsf=<file>     : Output PSF file (default: <input>.psf)"
    echo "--outnei=<file>     : Output neighbour file (default: <input>.nei)"
    echo "--opt=<file>        : Specify option file (default: ${DAOPHOT_OPT})"
    echo "--option <OP>=<val> : Pass option <OP> with value <val> (ex: TH=4)"
}

describe_psf_parameters() {
    echo "<FITS image>"
}

do_psf() {
    unset DAOPHOT_IN DAOPHOT_OUT
    DAOPHOT_OPTFILE="${DAOPHOT_OPT}"
    DAOPHOT_OPTIONS=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --inpho=*) DAOPHOT_IN[0]="${1##*=})" ;;
	    --inlst=*) DAOPHOT_IN[1]="${1##*=})" ;;
	    --outpsf=*) DAOPHOT_OUT[0]="${1##*=})" ;;
	    --outnei=*) DAOPHOT_OUT[1]="${1##*=})" ;;
	    --opt) DAOPHOT_OPTFILE="${1##*=}" ;;
	    --option) shift; DAOPHOT_OPTIONS="${DAOPHOT_OPTIONS} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ -z ${DAOPHOT_IN[0]} ]] && DAOPHOT_IN[0]="${1%.*}.ap"
    [[ -z ${DAOPHOT_IN[1]} ]] && DAOPHOT_IN[1]="${1%.*}.lst"
    [[ -z ${DAOPHOT_OUT[0]} ]] && DAOPHOT_OUT[0]="${1%.*}.psf"
    [[ -z ${DAOPHOT_OUT[1]} ]] && DAOPHOT_OUT[1]="${1%.*}.nei"

    daophot_run psf ${1}
}

### substar action
describe_substar() {
    echo "Subtract stars from an image with a scaled PSF"
}

describe_substar_options() {    
    echo "--in=<star file> : Input photometry file (default: <in>.nei)"
    echo "--inkeep=<star file> : File with stars to keep (default: <in>.lst)"
    echo "--out=<FITS image>   : Output subtracted image (default: <in>s.fits)"
}

describe_substar_parameters() {
    echo "<FITS image>"
}

do_substar() {
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --psf=*)    DAOPHOT_IN[0]="${1##*=}" ;;
	    --in=*)     DAOPHOT_IN[1]="${1##*=}" ;;
	    --inkeep=*) DAOPHOT_IN[2]="${1##*=}" ;;
	    --out=*)    DAOPHOT_OUT[0]="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ -z ${DAOPHOT_IN[0]} ]] && DAOPHOT_IN[0]="${1%.*}.psf"
    [[ -z ${DAOPHOT_IN[1]} ]] && DAOPHOT_IN[1]="${1%.*}.nei"
    [[ -z ${DAOPHOT_IN[2]} ]] && DAOPHOT_IN[2]="${1%.*}.lst"
    [[ -z ${DAOPHOT_OUT[0]} ]] && DAOPHOT_OUT[0]="${1%.*}s.fits"

    daophot_run substar ${1}
}

### sort action
describe_sort() {
    echo "Sort a star file according to a given column"
}

describe_sort_options() {
    echo "--index=<val>   : Column index to sort (default: 1)"
    echo "--out=<file>    : Output file name (default: <input>.srt)"
    echo "--renum         : Renumber the star IDs"
}

describe_sort_parameters() {
    echo "<star file>"
}

do_sort() {
    unset DAOPHOT_IN DAOPHOT_OUT
    DAOPHOT_IN[1]=1
    DAOPHOT_IN[2]=N
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --index=*) DAOPHOT_IN[1]="${1##*=}" ;;
	    --out=*) DAOPHOT_OUT[0]="${1##*=}" ;;
	    --renum) DAOPHOT_IN[2]=Y ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    DAOPHOT_IN[0]=${1}
    [[ -z ${DAOPHOT_OUT[0]} ]] && DAOPHOT_OUT[0]="${1%.*}.srt"

    daophot_run sort
}

### offset action
describe_offset() {
    echo "Add offsets to the first 4 columns of a star file"
}

describe_offset_options() {
    echo "--addid=<val> : Add <val> to ID (default: 0)"
    echo "--addx=<val>  : Add <val> to x-coordinate (default: 0)"
    echo "--addy=<val>  : Add <val> to y-coordinate (default: 0)"
    echo "--addmag=<val>: Add <val> to magnitude (default: 0)"
    echo "--out=<file>  : Output file name (default <input>.off)"
}

describe_offset_parameters() {
    echo "<star file>"
}

do_offset() {
    unset DAOPHOT_IN DAOPHOT_OUT
    DAOPHOT_IN[1]=0
    DAOPHOT_IN[2]=0
    DAOPHOT_IN[3]=0
    DAOPHOT_IN[4]=0
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --addid=*)  DAOPHOT_IN[1]=${1##*=} ;;
            --addx=*)   DAOPHOT_IN[2]=${1##*=} ;;
	    --addy=*)   DAOPHOT_IN[3]=${1##*=} ;;
	    --addmag=*) DAOPHOT_IN[4]=${1##*=} ;;
	    --out=*)    DAOPHOT_OUT[0]="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    DAOPHOT_IN[0]="${1}"
    [[ -z ${DAOPHOT_OUT[0]} ]] && DAOPHOT_OUT[0]="${1%.*}.off"

    daophot_run offset ${idoff} ${idx} ${idy} ${idmag}
}

### append action
describe_append() {
    echo "Concatenate two stellar data files"
}

describe_append_options() {
    echo "--out=<file>  : Output file name (default <input>.cmb)"
}

describe_append_parameters() {
    echo "<file 1> <file 2>"
}

do_append() {
    unset DAOPHOT_IN DAOPHOT_OUT
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --out=*) DAOPHOT_OUT[0]="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    DAOPHOT_IN[0]="${1}"
    DAOPHOT_IN[1]="${2}"
    [[ -z ${DAOPHOT_OUT[0]} ]] && DAOPHOT_OUT[0]="${1%.*}.cmb"

    daophot_run append
}

### allstar action
describe_allstar() {
    echo "Perform crowded-star profile fitting photometry"
}

describe_allstar_options() {
    echo "--in=<file>      : Input photometry (default: <input>.ap)"
    echo "--psf=<file>     : Input PSF file (default: <input>.psf)"
    echo "--out=<file>     : Output photometry file (default: <input>.nei)"
    echo "--sub=<FITS>     : Output residual image (default: <input>s.fits)"
    echo "--option <OP>=<val> : Pass option <OP> with value <val> (ex: FI=4)"
}

describe_allstar_parameters() {
    echo "<FITS image>"
}

do_allstar() {
    unset DAOPHOT_IN DAOPHOT_OUT DAOPHOT_OPTFILE DAOPHOT_OPTIONS
    DAOPHOT_OPTFILE="${ALLSTAR_OPT}"
    DAOPHOT_OPTIONS=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --in=*)   DAOPHOT_IN[1]="${1##*=}" ;;
	    --psf=*)  DAOPHOT_IN[0]="${1##*=}" ;;
	    --out=*)  DAOPHOT_OUT[0]="${1##*=}" ;;
	    --sub=*)  DAOPHOT_OUT[1]="${1##*=}" ;;
	    --option) shift; DAOPHOT_OPTIONS="${DAOPHOT_OPTIONS} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ -z ${DAOPHOT_IN[0]} ]] && DAOPHOT_IN[0]="${1%.*}.psf"
    [[ -z ${DAOPHOT_IN[1]} ]] && DAOPHOT_IN[1]="${1%.*}.ap"
    [[ -z ${DAOPHOT_OUT[0]} ]] && DAOPHOT_OUT[0]="${1%.*}.als"
    [[ -z ${DAOPHOT_OUT[1]} ]] && DAOPHOT_OUT[1]="${1%.*}s.fits"

    daophot_run allstar ${1}
}
