# -*-shell-script-*-
# vim: ft=bash

DESCRIPTION="Various tools for manipulating DAOPHOT catalogues"

inherit qa options

### HEADER ###
describe_header() {
    echo "Insert a DAOPHOT header file in a catalogue"
}

describe_header_parameters() {
    echo "<daophot option> <FITS> <file>"
}

describe_header_options() {
    echo "--out=<file>  : Output file name (default: same as input)"
    echo "--opt=<file>  : Option file as input (default: $(opt_file_path daophot))"
}

do_header() {    
    local outfile="" optfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --out=*) outfile="${1##*=}" ;;
	    --opt=*) optfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done
    [[ -r ${1} ]] || die -q "File ${1} not readable"
    [[ -r ${2} ]] || die -q "File ${2} not readable"
    [[ -w ${3} ]] || die -q "File ${3} not writeable"
    echo " >>> Insert a header into ${3}"
    cat_insert_header ${1} ${2} ${3} || die -q "Could not insert header"
}

### MERGE ###
describe_merge() {
    echo "Merge two catalogues with offsetting id numbers"
}

describe_merge_options() {
    echo "--out=<file>  : Output file name (default: <file1>)"
}

describe_merge_parameters() {
    echo "<file1> <file2>"
}

do_merge() {
    local outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --out=*) outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done
    
    allphot_setup --optfile="${infile}" daophot "${1}"
    daophot_sort 1 "${1}" tmpmerge.srt Y
    daophot_offset "${2}" $(tail -n 1 tmpmerge.srt | awk '{print $1+1}') 0 0 0 tmpmerge.off
    daophot_append "${1}" tmpmerge.off tmpmerge.app
    daophot_sort 1 tmpmerge.app ${outfile:-${1}} Y
    allphot_run
    rm -f tmpmerge.*
}

### CHISHARP ###
describe_chisharp() {
    echo "Filter PSF stars on a catalog with cuts on chi and sharp parameters"
}

describe_chisharp_options() {
    echo "--sharpmax    : Remove stars with |sharp| > sharpmax (default: 0.6)"
    echo "--chimax      : Remove stars with chi > chimax (default: 2)"
}

describe_chisharp_parameters() {
    echo "<file in> <prof fit file>"
}

do_chisharp() {
    local cmax=2 smax=0.6
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --sharpmax=*)  smax="${1##*=}";;
	    --chimax=*)    cmax="${1##*=}";;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done
    local pickcat=${1} profcat=${2} id
    [[ -w ${pickcat} ]] || die -q "File ${pickcat} not writeable"
    [[ -r ${profcat} ]] || die -q "File ${profcat} not readable"

    head -n 3 ${profcat} > ${pickcat}.filtered    
    while read line; do
	id=$(echo ${line} | awk '{print $1}')
	awk -v vid="${id}" \
	    -v vcmax="${cmax}" \
	    -v vsmax="${smax}" \
	    '{ if ( $1 == vid  && $8< vcmax && $9<vsmax && $9>-vsmax ) { print } }' \
	    ${profcat} >> ${pickcat}.filtered
    done < ${pickcat}
    echo " >>> Removed $(( $(cat_nstars ${pickcat}) - $(cat_nstars ${pickcat}.filtered) )) objects with chi > ${cmax} and |sharp| > ${smax}"
    mv -f ${pickcat}.filtered ${pickcat}
}

### NEIGHBOURS ###
describe_neighbours() {
    echo "Filter neighbours on a star catalogue thanks to with a PSF neighbour file"
}

describe_neighbours_parameters() {
    echo "<nei file> <cat to filter>"
}

do_neighbours() {
    [[ -r ${1} ]] || die -q "File ${1} not readable"
    [[ -w ${2} ]] || die -q "File ${2} not writeable"
    
    local nnei=$(grep -c [\*\?] ${1})
    [[ ${nnei} -gt 0 ]] && \
	sed -i \
	    $(grep [\*\?] ${1} | awk '{printf "-e /^[[:space:]]*"$1"/d "}') \
	    ${2}
    echo " >>> Removed ${nnei} neighbours to PSF stars"
}
