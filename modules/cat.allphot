# -*-shell-script-*-

DESCRIPTION="Various tools for manipulating DAOPHOT catalogues"

inherit qa options

### HEADER ###
describe_header() {
    echo "Insert a DAOPHOT header file in a catalogue"
}

describe_header_parameters() {
    echo "<daophot option> <fitsfile> <starfile>"
}

describe_header_options() {
    echo "--out=<file>  : Output file name (default: same as input)"
    echo "--opt=<file>  : Option file as input (default: $(opt_file_path daophot))"
}

do_header() {    
    local outfile="" optfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --out=*) outfile="${1##*=}" ;;
	    --opt=*) optfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ $# -lt 3 ]] && header_usage && return

    [[ -r ${1} ]] || die -q "File ${1} not readable"
    [[ -r ${2} ]] || die -q "File ${2} not readable"
    [[ -w ${3} ]] || die -q "File ${3} not writeable"

    write_process_msg "Insert a header into ${3}"
    cat_insert_header ${1} ${2} ${3} || die -q "Could not insert header"
}

### MERGE ###
describe_merge() {
    echo "Merge two star files with offsetting id numbers"
}

describe_merge_options() {
    echo "--out=<file>  : Output file name (default: <starfile1>)"
}

describe_merge_parameters() {
    echo "<starfile1> <starfile2>"
}

do_merge() {
    local outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --out=*) outfile="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ $# -lt 2 ]] && merge_usage && return
    
    allphot_setup --optfile="${infile}" daophot
    daophot_sort 1 "${1}" tmpmerge.srt Y
    daophot_offset "${2}" $(tail -n 1 tmpmerge.srt | awk '{print $1+1}') 0 0 0 tmpmerge.off
    daophot_append "${1}" tmpmerge.off tmpmerge.app
    daophot_sort 1 tmpmerge.app ${outfile:-${1}} Y
    allphot_run daophot

    rm -f tmpmerge.*
}

### CUTS ###
describe_cuts() {
    echo "Tag stars on als/alf file with (chi,sharp,mag,sigma). Stars with same ID will be removed in other input files"
}

describe_cuts_options() {
    echo "--sharpmax=<val> : Remove stars with |sharp| > <val> (default: 0.6)"
    echo "--chimax=<val>   : Remove stars with chi > <val> (default: 2)"
    echo "--sigmax=<val>   : Remove stars with sig > <val> (default: 9)"
    echo "--magmax=<val>   : Remove stars with mag > <val> (default: 99)"
}

describe_cuts_parameters() {
    echo "<starfile> [<starfile>]..."
}

do_cuts() {
    local cmax=2 smax=0.6 mmax=99 dmax=9
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --sharpmax=*)  smax="${1##*=}" ;;
	    --chimax=*)    cmax="${1##*=}" ;;
            --magmax=*)    mmax="${1##*=}" ;;
            --sigmax=*)    dmax="${1##*=}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ $# -lt 1 ]] && cuts_usage && return

    local profile=${1} f id
    [[ -r ${profile} ]] || die -q "File ${profile} not readable"

    if [[ $# == 1 ]]; then
	awk -v vcmax="${cmax}" \
	    -v vsmax="${smax}" \
	    -v vdmax="${dmax}" \
	    -v vmmax="${mmax}" \
	    '$4 > vmmax ||  $5 > vdmax || $8 > vcmax || $9 > vsmax || $9 < -vsmax ) {next}1' \
	    ${profile}
	return
    fi

    shift
    for f in $@; do
	[[ -w ${f} ]] || die -q "File ${f} not writeable"
	head -n 3 ${profile} > ${f}.filtered    
	while read line; do
	    id=$(echo ${line} | awk '{print $1}')
	    if [[ -n $(awk -v vid="${id}" \
		-v vcmax="${cmax}" \
		-v vsmax="${smax}" \
		-v vdmax="${dmax}" \
		-v vmmax="${mmax}" \
		'{ if ( $1 == vid  && $4 <= vmmax &&  $5 <= vdmax && $8 <= vcmax && $9 <= vsmax && $9 >= -vsmax ) { print $1 } }' \
		${profile}) ]]
	    then
		echo ${line} >> ${f}.filtered
	    fi
	done < ${f}
	write_process_msg "${f}: removed $(( $(cat_nstars ${pickcat}) - $(cat_nstars ${pickcat}.filtered) ) stars)"
	mv -f ${f}.filtered ${f}
    done
}

### NEIGHBOURS ###
describe_neighbours() {
    echo "Filter flagged stars on a PSF neighbour file to another star file"
}

describe_neighbours_parameters() {
    echo "<neifile> <starfile>"
}

do_neighbours() {

    [[ $# -lt 2 ]] && neighbours_usage && return

    [[ -r ${1} ]] || die -q "File ${1} not readable"
    [[ -w ${2} ]] || die -q "File ${2} not writeable"
    
    local nnei=$(grep -c [\*\?] ${1})
    [[ ${nnei} -gt 0 ]] && \
	sed -i \
	    $(awk '/[\*\?]/ {printf "-e /^[[:space:]]*"$1"/d "}' ${1}) \
	    ${2}
    write_process_msg "Removed ${nnei} neighbours to PSF stars"
}
