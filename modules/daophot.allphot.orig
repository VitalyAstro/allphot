# -*-bash-*-

DESCRIPTION="Run DAOPHOT actions"
VERSION="4"

inherit options paths daophot qa

# get_psf_fwhm <psf file>
get_psf_fwhm() {
    awk 'NR==2 {print ($1+$2)*1.176; exit}' ${1} 2> /dev/null
}

# allphot_do <cmd> [<FITS file>]
daophot_run() {
    local cmd=${1}
    local daoname="image"
    local procdir=${PWD}/daophot_${image}
    mkdir -p ${procdir}

    # prepare option file which always has to be passed
    local f lf="${DAOPHOT_OPT}"
    [[ ${cmd} == allstar ]] && lf="${ALLSTAR_OPT}"
    if [[ -n ${DAOPHOT_OPTFILE} ]]; then
	f="$(canonicalise ${DAOPHOT_OPTFILE})"
	[[ -r ${f} ]] || die -q "could not read option file: '$(basename ${f})'"
	[[ -e ${lf} ]] && [[ ! ${lf} -ef ${f} ]] && rm -f ${lf} && ln -s ${f} ${lf}
    else
	[[ -e ${procdir}/${f} ]] || cp ${ALLPHOT_OPT_DIR}/${f} ${procdir}/${f}
    fi

    # prepare input files
    for f in "${DAOPHOT_IN[@]} ${2}"; do
	lf=${procdir}/${daoname}.${f##*.}
	f=$(canonicalise ${f})
	[[ -z ${f} ]] && f=${lf}
	[[ -r ${f} ]] || die -q "could not read input file: '$(basename ${f})'"
	[[ -e ${lf} ]] && [[ ! ${lf} -ef ${f} ]] && rm -f ${lf} && ln -s ${f} ${lf}
    done
    # prepare output files
    for f in "${DAOPHOT_OUT[@]}"; do
	[[ -r ${f} ]] && mv -f ${f}{,.old}
	rm -f ${procdir}/${daoname}.${f##*.}
    done

    # process
    pushd ${procdir} &> /dev/null
    local cmdfile=${cmd}.in
    if [[ "find sky phot psf peak nstar substar addstar dump" =~ ${cmd} ]]; then
	daophot_attach ${daoname} > ${cmdfile}
    fi
    daophot_${cmd} $@ > ${cmdfile}
    echo " >>> Running daophot ${cmd}"
    daophot < ${cmdfile} || die -q "${cmd} failed"
    
    # clean up
    rm -f ${cmdfile}

    for f in "${DAOPHOT_OUT[@]}"; do
	lf=${daoname}.${f##*.}
	[[ ${lf} -ef ${f} ]] || mv -f ${lf} ${f}
	rm -f ${f}.old
    done
    popd &> /dev/null
}

do_opt() {
    local dictfile="" options="" outfile="${DAOPHOT_OPT}"
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --dict=*) dictfile="${1##*=}" ;;
	    --in=*)   DAOPHOT_OPTFILE=( "${1##*=}" ) ;;
	    --out=*)  outfile="${1##*=}" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '$1'" ;;
              *) break ;;
	esac
	shift
    done

    # update option from dictionnary
    if [[ -r ${dictfile} ]]; then
	[[ -z ${1} ]] && die -q "missing input FITS file"
	option_update_from_dict ${dict} ${outfile} ${1}
    fi
    # update options from command line
    if [[ -n ${options} ]]; then
	for opt in ${options}; do
	    option_set_value "${opt}" ${outfile}
	done
    fi
    # process
    DAOPHOT_OUT=( "${outfile}" ) daophot_run opt
}


# daophot_process_init <full_image_path_fits file>
# create a directory and prepare it for DAOPHOT runs
daophot_process_init() {
    [[ -e ${1} ]] || die -q "file ${1} not found."
    local image=$(basename ${1%.*})
    local procdir="${PWD}/daophot_${image}"
    mkdir -p ${procdir}
    pushd ${procdir} &> /dev/null
    [[ ! -r ${image}.fits ]] && ln -sfn $(relative_name ${1} ${procdir}) ${image}.fits
    [[ ! -r ${DAOPHOT_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT} .
}

daophot_process_end() {
    popd &> /dev/null
}

### opt action
describe_opt() {
    echo "Set options for DAOPHOT"
}

describe_opt_parameters() {
    echo "[<FITS image>]"
}

describe_opt_options() {
    echo "--dict=<file>       : Dictionary to set options from FITS keywords"
    echo "--in=<file>         : DAOPHOT option file as input (default ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT})"
    echo "--out=<file>        : DAOPHOT option file as output (default: daophot.opt)"
    echo "--option <OP>=<val> : Set option <OP> with value <val> (ex: TH=4)"
}

do_opt() {
    local dictfile="" infile="" outfile="" options=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --dict=*) dictfile="$(canonicalise ${1##*=})" ;;
	    --in=*)   optfile="$(canonicalise ${1##*=})" ;;
	    --out=*)   outfile="$(canonicalise ${1##*=})" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '$1'" ;;
              *) break ;;
	esac
	shift
    done
    [[ -z ${infile}  ]] && infile=${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT}
    [[ -z ${outfile} ]] && outfile=${DAOPHOT_OPT}
    [[ -r ${outfile} ]] && mv -f ${outfile}{,.old}

    mkdir -p daophot_opt$$
    pushd daophot_opt$$ &> /dev/null
    ln -s ${infile} ${DAOPHOT_OPT}
    if [[ -r ${dictfile} ]]; then
	[[ -z ${1} ]] && die -q "missing input FITS file"
	option_update_from_dict ${dict} ${loutfile} ${1}
    fi
    
    if [[ -n ${options} ]]; then
	for opt in ${options}; do
	    option_set_value "${opt}" ${loutfile}
	done
    fi
    echo " >>> DAOPHOT OPT"
    local procfile=${PROCDIR}/opt$$.in
    echo > ${procfile}
    daophot < ${procfile} || die -q "Something wrong in your options"
    rm -f ${procfile} ${outfile}.old
    [[ ${loutfile} -ef ${outfile} ]] || mv -f ${loutfile} ${outfile}
    popd &> /dev/null
}

### sky action
describe_sky() {
    echo "Compute the sky background and r.m.s."
}

describe_sky_parameters() {
    echo "<FITS image>"
}

do_sky() {
    [[ -z ${1} ]] && die -q "missing input FITS file"

    [[ ! -r ${DAOPHOT_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT} .
    local infits=$(canonicalise ${1})

    pushd $(dirname ${infits}) &> /dev/null
    [[ ! -r ${DAOPHOT_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT} .
    local linfits=$(basename ${infits%.*})
    [[ -e ${linfits} ]] && [[ ! ${linfits} -ef ${infits} ]] && rm -f ${linfits} && ln -s ${infits} ${linfits}
    echo " >>> DAOPHOT SKY on ${linfits}"
    local procfile=${PROCDIR}/${linfits%.*}.sky.in
    {
	daophot_attach ${linfits}
	daophot_sky
    } > ${procfile}
    daophot < ${procfile} || die -q "Could not compute sky"
    rm -f ${procfile}
    popd &> /dev/null
}

### find action
describe_find() {
    echo "Find stars on an image"
}

describe_find_options() {
    echo "--opt=<file>        : Specify option file (default: ${DAOPHOT_OPT})"
    echo "--option <OP>=<val> : Pass option <OP> with value <val> (ex: TH=4)"
    echo "--out=<file>        : Output star list file (default: <input>.coo)"
}

describe_find_parameters() {
    echo "<FITS image>"
}

do_find() {
    local options="" outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --opt) optfile="$(canonicalise ${1##*=})" ;; 
	    --option) shift; options="${options} ${1/ //}" ;;
	    --out=*) outfile="$(canonicalise ${1##*=})" ;; 
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done
    [[ -z ${1} ]] && die -q "missing input FITS file"
    local infits=$(canonicalise ${1})
    [[ -z ${outfile} ]] && outfile=${infits%.*}.coo
    [[ -e ${outfile} ]] && mv -f ${outfile}{,.old}

    pushd $(dirname ${infits}) &> /dev/null
    if [[ -n ${options} ]]; then
	for opt in ${options}; do
	    option_set_value "${opt}" ${DAOPHOT_OPT}
	done
    fi
    local linfits=$(basename ${infits})
    [[ -e ${linfits} ]] && [[ ! ${linfits} -ef ${infits} ]] && rm -f ${linfits} && ln -s ${infits} ${linfits}
    local loutfile=$(basename ${outfile})
    rm -f ${loutfile}
    echo " >>> DAOPHOT FIND on ${linfits}"
    local procfile=${linfits%.*}.find.in
    {
	daophot_attach ${linfits}
	daophot_find ${loutfile}
    } > ${procfile}
    daophot < ${procfile} || die -q "Could not detect stars"
    check_catalog ${loutfile} && rm -f ${image}jnk.fits ${outfile}.old ${procfile}
    [[ ${loutfile} -ef ${outfile} ]] || mv -f ${loutfile} ${outfile}
    popd &> /dev/null
}

### phot action
describe_phot() {
    echo "Perform aperture photometry"
}

describe_phot_options() {
    echo "--in=<file>         : Input star list file (default: <input>.coo)"
    echo "--out=<file>        : Output star list file (default: <input>.ap)"
    echo "--radius <RAD>=<val>: Set a aperture radius <RAD>"
    echo "--neifile=<file>    : Subtract neighbour stars from this file"
    echo "--psffile=<file>    : PSF to subtract neighbours (default: <input>.psf)"
}

describe_phot_parameters() {
    echo "<FITS image>"
}

do_phot() {
    local fwhm optfile="" infile="" outfile="" neifile="" pssfile="" radii=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --in=*) infile="$(canonicalise ${1##*=})" ;;
	    --out=*) outfile="$(canonicalise ${1##*=})" ;;
	    --neifile=*) neifile="$(canonicalise ${1##*=})" ;;
	    --optfile=*) optfile="$(canonicalise ${1##*=})" ;;
	    --psffile=*) psffile="$(canonicalise ${1##*=})" ;;
    	    --radius) shift; radii="${radii} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ -z ${1} ]] && die -q "missing input FITS file"
    local infits=$(canonicalise ${1})
    [[ -z ${infile} ]] && infile=${infits%.*}.coo
    [[ -r ${infile} ]] || die -q "could not read input file: '${infile}'"
    [[ -z ${outfile} ]] && outfile=${infits%.*}.ap

    if [[ -n ${neifile} ]]; then
	[[ -r ${neifile} ]] || die -q "could not read neighbour file: '${neifile}'"
	[[ -z ${psffile} ]] && psffile=${infits%.*}.psf
	[[ -r ${psffile} ]] || die -q "could not read psf file: '${psffile}'"
    else
	mv -f ${psffile}{,.sav}
    fi

    [[ -e ${outfile} ]] && mv -f ${outfile}{,.old}

    pushd $(dirname ${infits}) &> /dev/null
    local linfits=$(basename ${infits})
    [[ -e ${linfits} ]] && [[ ! ${linfits} -ef ${infits} ]] && rm -f ${linfits} && ln -s ${infits} ${linfits}
    local linfile=$(basename ${infile})
    [[ -e ${linfile} ]] && [[ ! ${linfile} -ef ${infile} ]] && rm -f ${linfile} && ln -s ${infile} ${linfile}
    local loutfile=$(basename ${outfile})
    rm -f ${loutfile}
    [[ ! -r ${DAOPHOT_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT} .
    if [[ -z ${optfile} ]]; then
	echo " >>> No aperture option file found, generating one"
	[[ ! -r ${PHOTO_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${PHOTO_OPT} .
    else
	[[ ${optfile} -ef ${PHOTO_OPT} ]] || cp ${optfile} ${PHOTO_OPT}
    fi
    if [[ -n ${radii} ]]; then
	for rad in ${radii}; do
	    option_set_value "${rad}" ${PHOTO_OPT}
	done
    fi
    if [[ -n ${neifile} ]]; then
	local lneifile=$(basename ${neifile})
	[[ -e ${lneifile} ]] && [[ ! ${lneifile} -ef ${neifile} ]] && rm -f ${lneifile} && ln -s ${neifile} ${lneifile}
	local lpsffile=$(basename ${psffile})
	[[ -e ${lpsffile} ]] && [[ ! ${lpsffile} -ef ${psffile} ]] && rm -f ${lpsffile} && ln -s ${psffile} ${lpsffile}
    fi
    local lneifile=$(basename ${neifile})
    [[ -e ${linfile} ]] && [[ ! ${linfile} -ef ${infile} ]] && rm -f ${linfile} && ln -s ${infile} ${linfile}
    local linfile=$(basename ${infile})
    [[ -e ${linfile} ]] && [[ ! ${linfile} -ef ${infile} ]] && rm -f ${linfile} && ln -s ${infile} ${linfile}
    echo " >>> DAOPHOT PHOT on ${linfits}"
    local procfile=${PROCDIR}/${linfits%.*}.phot.in
    {
	daophot_attach ${linfits}
	if [[ -n ${neifile} ]]; then
	    daophot_phot_with_psf ${PHOTO_OPT} ${lneifile} ${linfile} ${loutfile}
	else
	    daophot_phot ${PHOTO_OPT} ${linfile} ${loutfile}
	fi
    } > ${procfile}
    daophot < ${procfile} || die -q "Could not perform aperture photometry"
    check_catalog ${loutfile} && rm -f ${outfile}.old ${procfile}
    [[ ${loutfile} -ef ${outfile} ]] || mv -f ${loutfile} ${outfile}
    [[ -e ${psffile}.sav ]] && mv -f ${psffile}.psf{sav,}
    popd &> /dev/null
}

### pick action
describe_pick() {
    echo "Pick PSF Stars"
}

describe_pick_options() {
    echo "--magfaint=<value>  : Magnitude of the faintest star (default 13)"
    echo "--nstars=<value>    : Max number of stars to pick (default 200)"
    echo "--out=<file>        : Output star list file (default: <input>.ap)"
}

describe_pick_parameters() {
    echo "<star file>"
}

do_pick() {
    local nstars=200 magfaint=13 outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --magfaint=*) magfaint="${1##*=}";;
	    --nstars=*) nstars="${1##*=}";;
	    --out=*) outfile="$(canonicalise ${1##*=})" ;; 
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ -z ${1} ]] && die -q "missing input star file"

    local infile=$(canonicalise ${1})
    [[ -z ${outfile} ]] && outfile=${infile%.*}.lst
    
    pushd $(dirname ${infile}) &> /dev/null
    local linfile=$(basename ${infile})
    [[ -e ${linfile} ]] && [[ ! ${linfile} -ef ${infile} ]] && rm -f ${linfile} && ln -s ${infile} ${linfile}
    local loutfile=$(basename ${outfile})
    rm -f ${loutfile}
    [[ ! -r ${DAOPHOT_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT} .
    echo " >>> DAOPHOT PICK on ${linfile}"
    local procfile=${PROCDIR}/${linfile%.*}.pick.in
    {
	daophot_pick ${linfile} ${nstars} ${magfaint} ${loutfile}
    } > ${procfile}    
    daophot < ${procfile} || die -q "Could not pick PSF stars"
    check_catalog ${outfile} && rm -f ${outfile}.old ${procfile}
    [[ ${loutfile} -ef ${outfile} ]] || mv -f ${loutfile} ${outfile}
    popd &> /dev/null
}

### psf action
describe_psf() {
    echo "Fit an analytical PSF given a star list"
}

describe_psf_options() {
    echo "--inlst=<file>      : Input PSF star list (default: <input>.lst)"
    echo "--inpho=<file>      : Input photometry (default: <input>.ap)"
    echo "--outpsf=<file>     : Output PSF file (default: <input>.psf)"
    echo "--outnei=<file>     : Output neighbour file (default: <input>.nei)"
    echo "--option <OP>=<val> : Pass option <OP> with value <val> (ex: FI=4)"
}

describe_psf_parameters() {
    echo "<FITS image>"
}

do_psf() {
    local options="" lstfile="" phofile="" psffile="" neifile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --inlst=*) lstfile="$(canonicalise ${1##*=})" ;;
	    --inpho=*) phofile="$(canonicalise ${1##*=})" ;;
	    --outpsf=*) psffile="$(canonicalise ${1##*=})" ;;
	    --outnei=*) neifile="$(canonicalise ${1##*=})" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ -z ${1} ]] && die -q "missing input FITS file"
    local infits=$(canonicalise ${1})
    [[ -z ${lstfile} ]] && lstfile=${infits%.*}.lst
    [[ -r ${lstfile} ]] || die -q "could not read input star file: '${lstfile}'"
    [[ -z ${phofile} ]] && phofile=${infits%.*}.ap
    [[ -r ${phofile} ]] || die -q "could not read photometry file: '${phofile}'"
    [[ -z ${psffile} ]] && psffile=${infits%.*}.psf
    [[ -e ${psffile} ]] && mv -f ${psffile}{,.old}
    [[ -z ${neifile} ]] && neifile=${infits%.*}.nei
    [[ -e ${neifile} ]] && mv -f ${neifile}{,.old}

    pushd $(dirname ${infits}) &> /dev/null
    local linfits=$(basename ${infits})
    [[ -e ${linfits} ]] && [[ ! ${linfits} -ef ${infits} ]] && rm -f ${linfits} && ln -s ${infits} ${linfits}
    local llstfile=$(basename ${lstfile})
    [[ -e ${lstfile} ]] && [[ ! ${llstfile} -ef ${lstfile} ]] && rm -f ${llstfile} && ln -s ${lstfile} ${lstfile}
    local lpsffile=$(basename ${psffile})
    rm -f ${lpsffile}
    local lneifile=$(basename ${neifile})
    rm -f ${lneifile}
    [[ ! -r ${DAOPHOT_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT} .
    if [[ -n ${options} ]]; then
	for opt in ${options}; do
	    option_set_value "${opt}" ${DAOPHOT_OPT}
	done
    fi
    local procfile=${PROCDIR}/${linfits%.*}.psf.in
    echo " >>> DAOPHOT PSF on ${linfits}"
    {
	daophot_attach ${linfits}
	daophot_psf ${lphofile} ${llstfile} ${lpsffile} ${lneifile}
    } > ${procfile}
    daophot < ${procfile} || die -q "Could not build a PSF"
    check_catalog ${lneifile}
    check_psf ${lpsffile}
    rm -f ${psffile}.old ${neifile}.old ${procfile}
    [[ ${lpsffile} -ef ${psffile} ]] || mv -f ${lpsfile} ${psffile}
    [[ ${lneifile} -ef ${neifile} ]] || mv -f ${lneifile} ${neifile}
    popd &> /dev/null
}

### substar action
describe_substar() {
    echo "Subtract stars from an image with a scaled PSF"
}

describe_substar_options() {    
    echo "--in=<star file> : Input photometry file (default: <in>.nei)"
    echo "--inkeep=<star file> : File with stars to keep (default: <in>.lst)"
    echo "--out=<FITS image>   : Output subtracted image (default: <in>s.fits)"
}

describe_substar_parameters() {
    echo "<FITS image>"
}

do_substar() {
    local inkeep="" infile="" outfits="" psffile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --inkeep=*) inkeep="$(canonicalise ${1##*=})" ;;
	    --in=*) infile="$(canonicalise ${1##*=})" ;;
	    --out=*) outfits="$(canonicalise ${1##*=})" ;;
	    --psf=*) psffile="$(canonicalise ${1##*=})" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ -z ${1} ]] && die -q "missing input FITS file"
    local imfits=$(canonicalise ${1})

    [[ -z ${outfits} ]] && outfits=${infits%.*}s.fits
    [[ -z ${inkeep} ]]  && [[ -r ${image}.lst ]] && inkeep=${image}.lst
    [[ -z ${infile} ]]  && inphot=${image}s.nei
    [[ -e ${outfits} ]] && mv -f ${outfits} ${outfits}.old

    pushd $(dirname ${infits}) &> /dev/null
    local linfits=$(basename ${infits})
    [[ -e ${linfits} ]] && [[ ! ${linfits} -ef ${infits} ]] && rm -f ${linfits} && ln -s ${infits} ${linfits}
    local linfile=$(basename ${infile})
    [[ -e ${linfile} ]] && [[ ! ${linfile} -ef ${infile} ]] && rm -f ${linfile} && ln -s ${infile} ${linfile}
    local linkeep=""
    if [[ -n ${inkeep} ]]; then
	linkeep=$(basename ${inkeep})
	[[ -e ${linkeep} ]] && [[ ! ${linkeep} -ef ${inkeep} ]] && rm -f ${linkeep} && ln -s ${inkeep} ${linkeep}
    fi
    local loutfits=$(basename ${outfits})
    rm -f ${loutfits}
    [[ ! -r ${DAOPHOT_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT} .
    echo " >>> DAOPHOT SUBSTAR on ${linfits}"
    local procfile=${PROCDIR}/${linfits%.*}.sub.in
    {
	daophot_attach ${linfits}
	daophot_substar ${lpsffile} ${linphot} ${loutfits} ${linkeep}
    } > ${procfile}
    daophot < ${procfile} || die -q "Could not subtract PSF scaled stars"
    rm -f ${outfits}s.old ${procfile}
    [[ ${loutfits} -ef ${outfits} ]] || mv -f ${loutfits} ${outfits}
    popd &> /dev/null
}

### sort action
describe_sort() {
    echo "Sort a star file according to a given column"
}

describe_sort_options() {
    echo "--index=<val>   : Column index to sort (default: 1)"
    echo "--out=<file>    : Output file name (default: <input>.srt)"
    echo "--renum         : Renumber the star IDs"
}

describe_sort_parameters() {
    echo "<star file>"
}

do_sort() {
    local outfile="" idx=1 renum=N
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --index=*) idx="${1##*=}" ;;
	    --out=*) outfile="$(canonicalise ${1##*=})" ;;
	    --renum) renum=Y ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ -z ${1} ]] && die -q "missing input star file"
    local infile=$(canonicalise ${1})
    [[ -z ${outfile} ]] && outfile=${infile%.*}.srt
    [[ -e ${outfile} ]] && mv -f ${outfile} ${outfile}.old

    pushd $(dirname ${infile}) &> /dev/null
    local linfile=$(basename ${infile})
    [[ -e ${linfile} ]] && [[ ! ${linfile} -ef ${infile} ]] && rm -f ${linfile} && ln -s ${infile} ${linfile}
    local loutfile=$(basename ${outfile})
    rm -f ${loutfile}
    echo " >>> DAOPHOT SORT on ${linfile}"
    daophot_sort ${idx} ${linfile} ${loutfile} ${renum} > ${procfile}
    daophot < ${procfile} || die -q "Could not sort file"
    check_catalog ${outfile} && rm -f ${outfile}.old ${procfile}
    [[ ${loutfile} -ef ${outfile} ]] || mv -f ${loutfile} ${outfile}
    popd &> /dev/null
}

### offset action
describe_offset() {
    echo "Add offsets to the first 4 columns of a star file"
}

describe_offset_options() {
    echo "--addid=<val> : Add <val> to ID (default: 0)"
    echo "--addx=<val>  : Add <val> to x-coordinate (default: 0)"
    echo "--addy=<val>  : Add <val> to y-coordinate (default: 0)"
    echo "--addmag=<val>: Add <val> to magnitude (default: 0)"
    echo "--out=<file>  : Output file name (default <input>.off)"
}

describe_offset_parameters() {
    echo "<star file>"
}

do_offset() {
    local idoff=0 idx=0 idy=0 idmag=0 outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --addid=*)  idoff=${1##*=} ;;
            --addx=*)   idx=${1##*=} ;;
	    --addy=*)   idy=${1##*=} ;;
	    --addmag=*) idmag=${1##*=} ;;
	    --out=*) outfile="$(canonicalise ${1##*=})" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done
    [[ -z ${1} ]] && die -q "missing input star file"

    local infile=$(canonicalise ${1})
    [[ -z ${outfile} ]] && outfile=${infile%.*}.off
    [[ -e ${outfile} ]] && mv -f ${outfile}.old

    pushd $(dirname ${infile}) &> /dev/null
    [[ ! -r ${DAOPHOT_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT} .
    local linfile=$(basename ${infile})
    local loutfile=$(basename ${outfile})
    [[ -e ${linfile} ]] && [[ ! ${linfile} -ef ${infile} ]] && rm -f ${linfile} && ln -s ${infile} ${linfile}
    rm -f ${loutfile}
    echo " >>> DAOPHOT OFFSET on ${linfile}"
    local procfile=${PROCDIR}/${linfile%.*}.off.in
    daophot_offset ${linfile} ${idoff} ${idx} ${idy} ${idmag} ${loutfile} > ${procfile}
    daophot < ${procfile} || die -q "Could not offset stars"
    check_catalog ${loutfile} && rm -f ${procfile} ${outfile}.old
    [[ ${loutfile} -ef ${outfile} ]] || mv -f ${loutfile} ${outfile}
    popd &> /dev/null
}

### append action
describe_append() {
    echo "Concatenate two stellar data files"
}

describe_append_options() {
    echo "--out=<file>  : Output file name (default <input>.cmb)"
}

describe_append_parameters() {
    echo "<file 1> <file 2>"
}

do_append() {
    local outfile=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --out=*) outfile="$(canonicalise ${1##*=})" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done
    [[ -z ${2} ]] && die -q "missing input star file"

    local infile1=$(canonicalise ${1})
    local infile2=$(canonicalise ${2})
    [[ -z ${outfile} ]] && outfile=${infile1%.*}.cmb
    [[ -e ${outfile} ]] && mv -f ${outfile}{,.old}

    pushd $(dirname ${infile1}) &> /dev/null
    [[ ! -r ${DAOPHOT_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${DAOPHOT_OPT} .
    local linfile1=$(basename ${infile1})
    local linfile2=$(basename ${infile2})
    local loutfile=$(basename ${outfile})
    [[ -e ${linfile1} ]] && [[ ! ${linfile1} -ef ${infile1} ]] && rm -f ${linfile1} && ln -s ${infile1} ${linfile1}
    [[ -e ${linfile2} ]] && [[ ! ${linfile2} -ef ${infile2} ]] && rm -f ${linfile2} && ln -s ${infile2} ${linfile2}
    rm -f ${loutfile}
    echo " >>> DAOPHOT APPEND ${linfile2} to ${linfile1}"
    local procfile=${linfile1%.*}.app.in
    daophot_append ${linfile1} ${linfile2} ${loutfile} > ${procfile}
    daophot < ${procfile} || die -q "Could not append files"
    check_catalog ${loutfile} && rm -f ${procfile} ${outfile}.old
    [[ ${loutfile} -ef ${outfile} ]] || mv -f ${loutfile} ${outfile}
    popd &> /dev/null
}

### allstar action
describe_allstar() {
    echo "Perform crowded-star profile fitting photometry"
}

describe_allstar_options() {
    echo "--in=<file>      : Input photometry (default: <input>.ap)"
    echo "--psf=<file>     : Input PSF file (default: <input>.psf)"
    echo "--out=<file>     : Output photometry file (default: <input>.nei)"
    echo "--sub=<FITS>     : Output residual image (default: <input>s.fits)"
    echo "--option <OP>=<val> : Pass option <OP> with value <val> (ex: FI=4)"
}

describe_allstar_parameters() {
    echo "<FITS image>"
}

do_allstar() {
    local options="" outfile="" phofile="" psffile="" subfits=""
    while [[ $# -gt 0 ]]; do
	case "${1}" in
	    --in=*)   infile="$(canonicalise ${1##*=})" ;;
	    --psf=*) psffile="$(canonicalise ${1##*=})" ;;
	    --out=*) outfile="$(canonicalise ${1##*=})" ;;
	    --sub=*) subfits="$(canonicalise ${1##*=})" ;;
	    --option) shift; options="${options} ${1/ //}" ;;
	    --*) die -q "Unrecognized option '${1}'" ;;
              *) break ;;
        esac
	shift
    done

    [[ -z ${1} ]] && die -q "missing input FITS file"
    local infits=$(canonicalise ${1})
    [[ -z ${infile} ]] && lstfile=${infits%.*}.ap
    [[ -r ${infile} ]] || die -q "could not read input star file: '${infile}'"
    [[ -z ${psffile} ]] && psffile=${infits%.*}.psf
    [[ -r ${psffile} ]] || die -q "could not PSF file: '${phofile}'"
    [[ -z ${outfile} ]] && outfile=${infits%.*}.als
    [[ -e ${outfile} ]] && mv -f ${outfile}{,.old}
    [[ -z ${subfits} ]] && subfits=${infits%.*}s.fits
    [[ -e ${subfits} ]] && mv -f ${subfits}{,.old}

    pushd $(dirname ${infits}) &> /dev/null
    local linfits=$(basename ${infits})
    [[ -e ${linfits} ]] && [[ ! ${linfits} -ef ${infits} ]] && rm -f ${linfits} && ln -s ${infits} ${linfits}
    local linfile=$(basename ${infile})
    [[ -e ${infile} ]] && [[ ! ${linfile} -ef ${infile} ]] && rm -f ${linfile} && ln -s ${infile} ${infile}
    local lpsffile=$(basename ${psffile})
    [[ -e ${psffile} ]] && [[ ! ${lpsffile} -ef ${psffile} ]] && rm -f ${lpsffile} && ln -s ${psffile} ${psffile}
    local loutfile=$(basename ${outfile})
    rm -f ${loutfile}
    local lsubfits=$(basename ${subfits})
    rm -f ${lsubfits}
    [[ ! -r ${ALLSTAR_OPT} ]] && cp ${ALLPHOT_OPT_DIR}/${ALLSTAR_OPT} .
    if [[ -n ${options} ]]; then
	for opt in ${options}; do
	    option_set_value "${opt}" ${ALLSTAR_OPT}
	done
    fi
    echo " >>> ALLSTAR on ${linfits}"
    daophot_allstar ${linfits} ${psffile} ${infile} ${loutfile} ${lsubfits} > ${procfile}
    allstar < ${procfile}
    check_catalog ${outfile} && rm -f ${outfile}.old ${subfits}.old ${procfile}
    [[ ${loutfile} -ef ${outfile} ]] || mv -f ${loutfile} ${outfile}
    [[ ${lsubfits} -ef ${subfits} ]] || mv -f ${lsubfits} ${subfits}
    popd &> /dev/null
}
