#!%BASH%
# -*-bash-*- vim: ft=bash

: ${ALLPHOT_LIBEXEC_PATH:="%LIBEXECDIR%/%NAME%"}
: ${ALLPHOT_DATA_PATH:="%DATADIR%/%NAME%"}
: ${ALLPHOT_DEFAULT_MODULES_PATH:="${ALLPHOT_DATA_PATH}/modules"}

# Look in these places for modules
ALLPHOT_MODULES_PATH=(
    "${HOME}/.%NAME%/modules"
    "${ALLPHOT_DEFAULT_MODULES_PATH}"
    "${ALLPHOT_LIBEXEC_PATH}/modules"
)

# Look in this place for libraries
ALLPHOT_CORE_PATH="${ALLPHOT_LIBEXEC_PATH}/libs"

# Look here for the default contents of a module
ALLPHOT_DEFAULT_ACTIONS="${ALLPHOT_CORE_PATH}/default.%NAME%"

# Our program name and version
ALLPHOT_VERSION="%VERSION%"
ALLPHOT_PROGRAM_NAME="allphot"

# Invocation information
ALLPHOT_BINARY_NAME="${0}"
ALLPHOT_KILL_TARGET="$$"

# Global options
ALLPHOT_OPTIONS=""

# Remove all alias definitions. Unset functions and variables that are
# known to cause trouble.
"unalias" -a
unset -f rm
unset CDPATH GLOBIGNORE
IFS=$' \t\n'

shopt -s extglob
shopt -s expand_aliases

# Load core functions
source "${ALLPHOT_CORE_PATH}/core.bash" || exit 255
# Load necessary functions for the main script
inherit output paths tests

# Sneaky trick to make die in subshells work. If you don't get
# it, don't ask...
trap 'exit 250' 15

# Find and echo the filename of the foo module. If there's no foo module,
# die.
ap_find_module() {
    local modname="$1" modpath="" modfile=""
    [[ -z ${modname} ]] && die "Usage: ${FUNCNAME} <module>"
    for modpath in "${ALLPHOT_MODULES_PATH[@]}" ; do
	[[ -f ${modpath}/${modname}.%NAME% ]] && break
    done
    
    modfile="${modpath}/${modname}.%NAME%"
    [[ -r ${modfile} ]] || die -q "Can't load module ${modname}"
    echo ${modfile}
}

# Display usage
ap_do_usage() {
    echo "Usage: ${ALLPHOT_PROGRAM_NAME} [global options] <module name> [module options] <module parameters>"
}

# Display help
ap_do_help() {
    set_output_mode default
    ap_do_usage
    echo
    ap_do_list_options
    echo
    ap_do_list_modules
}

# Display version
ap_do_version() {
    echo "${ALLPHOT?_PROGRAM_NAME} ${ALLPHOT_VERSION}"
}

# Display all recognized global options
ap_do_list_options() {
    write_list_start "Global options:"
    write_kv_list_entry "--brief"    "Make output shorter"
    write_kv_list_entry "--no-color,--no-colour"    "Disable coloured output"
}

# Display all available modules DEPRECATED
ap_do_list_modules() {
    do_action modules list "$@"
}

### main code ###

# enable colour output and get width of terminal iff stdout is a tty
if [[ -t 1 ]]; then
    colours
    init_columns
else
    nocolours
fi

# figure out what the action is. we need to know whether we're
# invoked as a something-config/something-update.
action=""

for suffix in config update{,r} tool manager reader ; do
    if [[ ${0%%-${suffix}} != ${0} ]] ; then
	action=$(basename "${0}" )
	action=${action%%-${suffix}}
	break
    fi
done
unset suffix

if [[ -z ${action} ]] ; then
    binname=$(basename "${0}" )
    for prefix in config update{,r} manage 'read' ; do
	if [[ ${binname##${prefix}-} != ${binname} ]] ; then
	    action=$(basename "${0}" )
	    action=${action##${prefix}-}
	    break
	fi
    done
    unset binname prefix
fi

if [[ -z ${action} ]] && [[ -n ${1##--} ]] ; then
    while [[ ${1##--} != ${1} ]] ; do
	case ${1##--} in
	    brief)
		ALLPHOT_OPTIONS="${ALLPHOT_OPTIONS} brief"
		set_output_mode brief
		;;
	    no-colour|no-color)
		ALLPHOT_OPTIONS="${ALLPHOT_OPTIONS} no-colour"
		nocolours
		;;
	    help|version)
		action=${1##--}
		;;
	    *)
		die -q "Unknown option ${1}"
		;;
	esac
	shift
    done
    if [[ -z ${action} ]]; then
	action=${1}
	shift
    fi
fi

if [[ -n ${action} ]] ; then
    if is_function "ap_do_${action//-/_}" ; then
	[[ $# -gt 0 ]] && die -q "Too many parameters"
	ap_do_${action//-/_}
    else
	do_action "${action}" "$@"
    fi
else
    ap_do_help
fi
